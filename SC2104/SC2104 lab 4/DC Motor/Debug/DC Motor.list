
DC Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce8  08006ce8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf0  08006cf0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf0  08006cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005fc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000670  20000670  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011be0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ec  00000000  00000000  00031c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  00034fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b14  00000000  00000000  00035f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013218  00000000  00000000  00057a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdbdc  00000000  00000000  0006ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a4c  00000000  00000000  001388c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006178 	.word	0x08006178

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006178 	.word	0x08006178

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b974 	b.w	80008e8 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	468e      	mov	lr, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14d      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000626:	428a      	cmp	r2, r1
 8000628:	4694      	mov	ip, r2
 800062a:	d969      	bls.n	8000700 <__udivmoddi4+0xe8>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b152      	cbz	r2, 8000648 <__udivmoddi4+0x30>
 8000632:	fa01 f302 	lsl.w	r3, r1, r2
 8000636:	f1c2 0120 	rsb	r1, r2, #32
 800063a:	fa20 f101 	lsr.w	r1, r0, r1
 800063e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000642:	ea41 0e03 	orr.w	lr, r1, r3
 8000646:	4094      	lsls	r4, r2
 8000648:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800064c:	0c21      	lsrs	r1, r4, #16
 800064e:	fbbe f6f8 	udiv	r6, lr, r8
 8000652:	fa1f f78c 	uxth.w	r7, ip
 8000656:	fb08 e316 	mls	r3, r8, r6, lr
 800065a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800065e:	fb06 f107 	mul.w	r1, r6, r7
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f106 30ff 	add.w	r0, r6, #4294967295
 800066e:	f080 811f 	bcs.w	80008b0 <__udivmoddi4+0x298>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 811c 	bls.w	80008b0 <__udivmoddi4+0x298>
 8000678:	3e02      	subs	r6, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	b2a4      	uxth	r4, r4
 8000680:	fbb3 f0f8 	udiv	r0, r3, r8
 8000684:	fb08 3310 	mls	r3, r8, r0, r3
 8000688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800068c:	fb00 f707 	mul.w	r7, r0, r7
 8000690:	42a7      	cmp	r7, r4
 8000692:	d90a      	bls.n	80006aa <__udivmoddi4+0x92>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f100 33ff 	add.w	r3, r0, #4294967295
 800069c:	f080 810a 	bcs.w	80008b4 <__udivmoddi4+0x29c>
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	f240 8107 	bls.w	80008b4 <__udivmoddi4+0x29c>
 80006a6:	4464      	add	r4, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ae:	1be4      	subs	r4, r4, r7
 80006b0:	2600      	movs	r6, #0
 80006b2:	b11d      	cbz	r5, 80006bc <__udivmoddi4+0xa4>
 80006b4:	40d4      	lsrs	r4, r2
 80006b6:	2300      	movs	r3, #0
 80006b8:	e9c5 4300 	strd	r4, r3, [r5]
 80006bc:	4631      	mov	r1, r6
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d909      	bls.n	80006da <__udivmoddi4+0xc2>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	f000 80ef 	beq.w	80008aa <__udivmoddi4+0x292>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e9c5 0100 	strd	r0, r1, [r5]
 80006d2:	4630      	mov	r0, r6
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	fab3 f683 	clz	r6, r3
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d14a      	bne.n	8000778 <__udivmoddi4+0x160>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d302      	bcc.n	80006ec <__udivmoddi4+0xd4>
 80006e6:	4282      	cmp	r2, r0
 80006e8:	f200 80f9 	bhi.w	80008de <__udivmoddi4+0x2c6>
 80006ec:	1a84      	subs	r4, r0, r2
 80006ee:	eb61 0303 	sbc.w	r3, r1, r3
 80006f2:	2001      	movs	r0, #1
 80006f4:	469e      	mov	lr, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d0e0      	beq.n	80006bc <__udivmoddi4+0xa4>
 80006fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006fe:	e7dd      	b.n	80006bc <__udivmoddi4+0xa4>
 8000700:	b902      	cbnz	r2, 8000704 <__udivmoddi4+0xec>
 8000702:	deff      	udf	#255	; 0xff
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	2a00      	cmp	r2, #0
 800070a:	f040 8092 	bne.w	8000832 <__udivmoddi4+0x21a>
 800070e:	eba1 010c 	sub.w	r1, r1, ip
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2601      	movs	r6, #1
 800071c:	0c20      	lsrs	r0, r4, #16
 800071e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000722:	fb07 1113 	mls	r1, r7, r3, r1
 8000726:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800072a:	fb0e f003 	mul.w	r0, lr, r3
 800072e:	4288      	cmp	r0, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x12c>
 8000732:	eb1c 0101 	adds.w	r1, ip, r1
 8000736:	f103 38ff 	add.w	r8, r3, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x12a>
 800073c:	4288      	cmp	r0, r1
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2c0>
 8000742:	4643      	mov	r3, r8
 8000744:	1a09      	subs	r1, r1, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb1 f0f7 	udiv	r0, r1, r7
 800074c:	fb07 1110 	mls	r1, r7, r0, r1
 8000750:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x156>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 31ff 	add.w	r1, r0, #4294967295
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x154>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2ca>
 800076c:	4608      	mov	r0, r1
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000776:	e79c      	b.n	80006b2 <__udivmoddi4+0x9a>
 8000778:	f1c6 0720 	rsb	r7, r6, #32
 800077c:	40b3      	lsls	r3, r6
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa20 f407 	lsr.w	r4, r0, r7
 800078a:	fa01 f306 	lsl.w	r3, r1, r6
 800078e:	431c      	orrs	r4, r3
 8000790:	40f9      	lsrs	r1, r7
 8000792:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000796:	fa00 f306 	lsl.w	r3, r0, r6
 800079a:	fbb1 f8f9 	udiv	r8, r1, r9
 800079e:	0c20      	lsrs	r0, r4, #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fb09 1118 	mls	r1, r9, r8, r1
 80007a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ac:	fb08 f00e 	mul.w	r0, r8, lr
 80007b0:	4288      	cmp	r0, r1
 80007b2:	fa02 f206 	lsl.w	r2, r2, r6
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b8>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2bc>
 80007c4:	4288      	cmp	r0, r1
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2bc>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	1a09      	subs	r1, r1, r0
 80007d2:	b2a4      	uxth	r4, r4
 80007d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d8:	fb09 1110 	mls	r1, r9, r0, r1
 80007dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007e4:	458e      	cmp	lr, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1e2>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2b4>
 80007f2:	458e      	cmp	lr, r1
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2b4>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000802:	eba1 010e 	sub.w	r1, r1, lr
 8000806:	42a1      	cmp	r1, r4
 8000808:	46c8      	mov	r8, r9
 800080a:	46a6      	mov	lr, r4
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x2a4>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x2a0>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x212>
 8000812:	ebb3 0208 	subs.w	r2, r3, r8
 8000816:	eb61 010e 	sbc.w	r1, r1, lr
 800081a:	fa01 f707 	lsl.w	r7, r1, r7
 800081e:	fa22 f306 	lsr.w	r3, r2, r6
 8000822:	40f1      	lsrs	r1, r6
 8000824:	431f      	orrs	r7, r3
 8000826:	e9c5 7100 	strd	r7, r1, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	f1c2 0320 	rsb	r3, r2, #32
 8000836:	40d8      	lsrs	r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	fa21 f303 	lsr.w	r3, r1, r3
 8000840:	4091      	lsls	r1, r2
 8000842:	4301      	orrs	r1, r0
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000850:	fb07 3610 	mls	r6, r7, r0, r3
 8000854:	0c0b      	lsrs	r3, r1, #16
 8000856:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800085a:	fb00 f60e 	mul.w	r6, r0, lr
 800085e:	429e      	cmp	r6, r3
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x260>
 8000866:	eb1c 0303 	adds.w	r3, ip, r3
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b8>
 8000870:	429e      	cmp	r6, r3
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b8>
 8000874:	3802      	subs	r0, #2
 8000876:	4463      	add	r3, ip
 8000878:	1b9b      	subs	r3, r3, r6
 800087a:	b289      	uxth	r1, r1
 800087c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000880:	fb07 3316 	mls	r3, r7, r6, r3
 8000884:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000888:	fb06 f30e 	mul.w	r3, r6, lr
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x28a>
 8000890:	eb1c 0101 	adds.w	r1, ip, r1
 8000894:	f106 38ff 	add.w	r8, r6, #4294967295
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2b0>
 800089a:	428b      	cmp	r3, r1
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2b0>
 800089e:	3e02      	subs	r6, #2
 80008a0:	4461      	add	r1, ip
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0x104>
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e705      	b.n	80006bc <__udivmoddi4+0xa4>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e3      	b.n	800067c <__udivmoddi4+0x64>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6f8      	b.n	80006aa <__udivmoddi4+0x92>
 80008b8:	454b      	cmp	r3, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f8>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f8>
 80008c8:	4646      	mov	r6, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x28a>
 80008cc:	4620      	mov	r0, r4
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1e2>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x260>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b8>
 80008d8:	3b02      	subs	r3, #2
 80008da:	4461      	add	r1, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x12c>
 80008de:	4630      	mov	r0, r6
 80008e0:	e709      	b.n	80006f6 <__udivmoddi4+0xde>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x156>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <HAL_TIM_IC_CaptureCallback>:
int32_t millisOld, millisNow, dt; // to calculate I and D for PID control
int16_t Kp = 0;
float_t Kd = 0;
float_t Ki = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_TIM_IC_CaptureCallback+0x50>)
 80008fc:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000906:	801a      	strh	r2, [r3, #0]
	position = count/4;  //x1 Encoding
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x54>)
 800090a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800090e:	2b00      	cmp	r3, #0
 8000910:	da00      	bge.n	8000914 <HAL_TIM_IC_CaptureCallback+0x28>
 8000912:	3303      	adds	r3, #3
 8000914:	109b      	asrs	r3, r3, #2
 8000916:	b21a      	sxth	r2, r3
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x58>)
 800091a:	801a      	strh	r2, [r3, #0]
	angle = count/2; // x2 encoding
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x54>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	0fda      	lsrs	r2, r3, #31
 8000924:	4413      	add	r3, r2
 8000926:	105b      	asrs	r3, r3, #1
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800092c:	801a      	strh	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200001fc 	.word	0x200001fc
 8000940:	20000200 	.word	0x20000200
 8000944:	2000021e 	.word	0x2000021e
 8000948:	20000220 	.word	0x20000220

0800094c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == USER_PB_Pin) {
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800095c:	d122      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x58>
		// toggle LED
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <HAL_GPIO_EXTI_Callback+0x60>)
 8000964:	f001 ffad 	bl	80028c2 <HAL_GPIO_TogglePin>
		if (start == 0){
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d116      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0x52>
			start = 1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
		    // reset all value to Zero
		    TIM2->CNT = 0; // Timer Counter Value
 8000976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
		    speed = 0;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	801a      	strh	r2, [r3, #0]
		    position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000986:	2200      	movs	r2, #0
 8000988:	801a      	strh	r2, [r3, #0]
		    oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_GPIO_EXTI_Callback+0x70>)
 800098c:	2200      	movs	r2, #0
 800098e:	801a      	strh	r2, [r3, #0]
		    angle = 0;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	801a      	strh	r2, [r3, #0]
		    pwmVal = 0;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000998:	2200      	movs	r2, #0
 800099a:	801a      	strh	r2, [r3, #0]
		    }
		else
			start = 0;
 	    }
}
 800099c:	e002      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x58>
			start = 0;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	20000208 	.word	0x20000208
 80009b4:	20000202 	.word	0x20000202
 80009b8:	2000021e 	.word	0x2000021e
 80009bc:	20000650 	.word	0x20000650
 80009c0:	20000220 	.word	0x20000220
 80009c4:	2000020c 	.word	0x2000020c

080009c8 <Motor_direction>:


void Motor_direction(uint8_t forward) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if (forward){// move forward
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d020      	beq.n	8000a1a <Motor_direction+0x52>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 80009d8:	2201      	movs	r2, #1
 80009da:	2108      	movs	r1, #8
 80009dc:	4821      	ldr	r0, [pc, #132]	; (8000a64 <Motor_direction+0x9c>)
 80009de:	f001 ff57 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <Motor_direction+0x9c>)
 80009e8:	f001 ff52 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <Motor_direction+0x9c>)
 80009f2:	f001 ff4d 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <Motor_direction+0x9c>)
 80009fc:	f001 ff48 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel D- forward
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	4818      	ldr	r0, [pc, #96]	; (8000a68 <Motor_direction+0xa0>)
 8000a08:	f001 ff42 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DIN2_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <Motor_direction+0xa0>)
 8000a14:	f001 ff3c 	bl	8002890 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, DIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel D- reverse
		HAL_GPIO_WritePin(GPIOB, DIN2_Pin, GPIO_PIN_SET);
	}
}
 8000a18:	e01f      	b.n	8000a5a <Motor_direction+0x92>
	    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <Motor_direction+0x9c>)
 8000a20:	f001 ff36 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	480e      	ldr	r0, [pc, #56]	; (8000a64 <Motor_direction+0x9c>)
 8000a2a:	f001 ff31 	bl	8002890 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <Motor_direction+0x9c>)
 8000a34:	f001 ff2c 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <Motor_direction+0x9c>)
 8000a3e:	f001 ff27 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel D- reverse
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <Motor_direction+0xa0>)
 8000a4a:	f001 ff21 	bl	8002890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DIN2_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <Motor_direction+0xa0>)
 8000a56:	f001 ff1b 	bl	8002890 <HAL_GPIO_WritePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400

08000a6c <PID_Control>:
		  OLED_ShowString(55, 50, buf);
		  OLED_Refresh_Gram();
	  }
}

int16_t PID_Control(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	  //Control Loop
	  if (abs(error)>2){ //more than 2 degree difference
 8000a70:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <PID_Control+0x15c>)
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bfb8      	it	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f240 80a0 	bls.w	8000bc4 <PID_Control+0x158>
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer
    	  angle = (int)(position*360/265);  // supposed to be 260 tick per revolution?
 8000a84:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <PID_Control+0x160>)
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <PID_Control+0x164>)
 8000a96:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9a:	1192      	asrs	r2, r2, #6
 8000a9c:	17db      	asrs	r3, r3, #31
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <PID_Control+0x168>)
 8000aa4:	801a      	strh	r2, [r3, #0]
  	      error = target_angle - angle;
 8000aa6:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <PID_Control+0x16c>)
 8000aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <PID_Control+0x168>)
 8000ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <PID_Control+0x15c>)
 8000abe:	801a      	strh	r2, [r3, #0]

        if (error > 0)
 8000ac0:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <PID_Control+0x15c>)
 8000ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dd03      	ble.n	8000ad2 <PID_Control+0x66>
      	  Motor_direction(1); //forward
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff ff7c 	bl	80009c8 <Motor_direction>
 8000ad0:	e002      	b.n	8000ad8 <PID_Control+0x6c>
        else
      	  Motor_direction(0); //reverse direction
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff78 	bl	80009c8 <Motor_direction>

        millisNow = HAL_GetTick();
 8000ad8:	f001 fb6a 	bl	80021b0 <HAL_GetTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <PID_Control+0x170>)
 8000ae2:	601a      	str	r2, [r3, #0]
        dt = (millisNow - millisOld); // time elapsed in millisecond
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <PID_Control+0x170>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <PID_Control+0x174>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	4a3d      	ldr	r2, [pc, #244]	; (8000be4 <PID_Control+0x178>)
 8000af0:	6013      	str	r3, [r2, #0]
        millisOld = millisNow; // store the current time for next round
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <PID_Control+0x170>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a3a      	ldr	r2, [pc, #232]	; (8000be0 <PID_Control+0x174>)
 8000af8:	6013      	str	r3, [r2, #0]

        error_area = error_area + error*dt; // area under error for Ki
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <PID_Control+0x15c>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <PID_Control+0x178>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	fb03 f202 	mul.w	r2, r3, r2
 8000b0a:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <PID_Control+0x17c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a35      	ldr	r2, [pc, #212]	; (8000be8 <PID_Control+0x17c>)
 8000b12:	6013      	str	r3, [r2, #0]

        error_change = error - error_old; // change in error
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <PID_Control+0x15c>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <PID_Control+0x180>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <PID_Control+0x184>)
 8000b24:	6013      	str	r3, [r2, #0]
  	    error_old = error; //store the error for next round
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <PID_Control+0x15c>)
 8000b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <PID_Control+0x180>)
 8000b30:	601a      	str	r2, [r3, #0]
        error_rate = error_change/dt; // for Kd
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <PID_Control+0x184>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <PID_Control+0x178>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <PID_Control+0x188>)
 8000b48:	edc3 7a00 	vstr	s15, [r3]

		pwmVal = (int)(error*Kp + error_area*Ki + error_rate*Kd);  // PID
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <PID_Control+0x15c>)
 8000b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <PID_Control+0x18c>)
 8000b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <PID_Control+0x17c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <PID_Control+0x190>)
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <PID_Control+0x188>)
 8000b82:	edd3 6a00 	vldr	s13, [r3]
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <PID_Control+0x194>)
 8000b88:	edd3 7a00 	vldr	s15, [r3]
 8000b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b98:	ee17 3a90 	vmov	r3, s15
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <PID_Control+0x198>)
 8000ba0:	801a      	strh	r2, [r3, #0]

  	  //pwmVal = 2000;   // overwrite PID above, minimum pwmVal = 1000

		if (pwmVal > pwmMax)  // Clamp the PWM to its maximum value
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <PID_Control+0x198>)
 8000ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <PID_Control+0x19c>)
 8000baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dd04      	ble.n	8000bbc <PID_Control+0x150>
		   pwmVal = pwmMax;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <PID_Control+0x19c>)
 8000bb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <PID_Control+0x198>)
 8000bba:	801a      	strh	r2, [r3, #0]

		return(pwmVal);
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <PID_Control+0x198>)
 8000bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc2:	e7ff      	b.n	8000bc4 <PID_Control+0x158>
    	//__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_4,pwmVal); // output the valie
	    } // if loop
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000224 	.word	0x20000224
 8000bcc:	2000021e 	.word	0x2000021e
 8000bd0:	3dd38ff1 	.word	0x3dd38ff1
 8000bd4:	20000220 	.word	0x20000220
 8000bd8:	20000222 	.word	0x20000222
 8000bdc:	2000023c 	.word	0x2000023c
 8000be0:	20000238 	.word	0x20000238
 8000be4:	20000240 	.word	0x20000240
 8000be8:	20000228 	.word	0x20000228
 8000bec:	2000022c 	.word	0x2000022c
 8000bf0:	20000230 	.word	0x20000230
 8000bf4:	20000234 	.word	0x20000234
 8000bf8:	20000244 	.word	0x20000244
 8000bfc:	2000024c 	.word	0x2000024c
 8000c00:	20000248 	.word	0x20000248
 8000c04:	2000020c 	.word	0x2000020c
 8000c08:	20000002 	.word	0x20000002

08000c0c <serial_uart>:

void serial_uart(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	 // send the values to serial port for display
		  angle = (int)(position*360/265);
 8000c10:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <serial_uart+0x1a8>)
 8000c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <serial_uart+0x1ac>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1192      	asrs	r2, r2, #6
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <serial_uart+0x1b0>)
 8000c30:	801a      	strh	r2, [r3, #0]
		  sprintf(buf, "%4d", angle); //Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulse per revolution
 8000c32:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <serial_uart+0x1b0>)
 8000c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4961      	ldr	r1, [pc, #388]	; (8000dc0 <serial_uart+0x1b4>)
 8000c3c:	4861      	ldr	r0, [pc, #388]	; (8000dc4 <serial_uart+0x1b8>)
 8000c3e:	f004 fe2d 	bl	800589c <siprintf>
	      OLED_ShowString(50, 10, buf);
 8000c42:	4a60      	ldr	r2, [pc, #384]	; (8000dc4 <serial_uart+0x1b8>)
 8000c44:	210a      	movs	r1, #10
 8000c46:	2032      	movs	r0, #50	; 0x32
 8000c48:	f000 fee2 	bl	8001a10 <OLED_ShowString>
	      //send to serial port
	      HAL_UART_Transmit(&huart3, buf, 4, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2204      	movs	r2, #4
 8000c52:	495c      	ldr	r1, [pc, #368]	; (8000dc4 <serial_uart+0x1b8>)
 8000c54:	485c      	ldr	r0, [pc, #368]	; (8000dc8 <serial_uart+0x1bc>)
 8000c56:	f003 fe28 	bl	80048aa <HAL_UART_Transmit>

	      buf[0]=',';
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <serial_uart+0x1b8>)
 8000c5c:	222c      	movs	r2, #44	; 0x2c
 8000c5e:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	2201      	movs	r2, #1
 8000c66:	4957      	ldr	r1, [pc, #348]	; (8000dc4 <serial_uart+0x1b8>)
 8000c68:	4857      	ldr	r0, [pc, #348]	; (8000dc8 <serial_uart+0x1bc>)
 8000c6a:	f003 fe1e 	bl	80048aa <HAL_UART_Transmit>
	      sprintf(buf, "%4d", target_angle);
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <serial_uart+0x1c0>)
 8000c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4952      	ldr	r1, [pc, #328]	; (8000dc0 <serial_uart+0x1b4>)
 8000c78:	4852      	ldr	r0, [pc, #328]	; (8000dc4 <serial_uart+0x1b8>)
 8000c7a:	f004 fe0f 	bl	800589c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 4, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2204      	movs	r2, #4
 8000c84:	494f      	ldr	r1, [pc, #316]	; (8000dc4 <serial_uart+0x1b8>)
 8000c86:	4850      	ldr	r0, [pc, #320]	; (8000dc8 <serial_uart+0x1bc>)
 8000c88:	f003 fe0f 	bl	80048aa <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <serial_uart+0x1b8>)
 8000c8e:	222c      	movs	r2, #44	; 0x2c
 8000c90:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2201      	movs	r2, #1
 8000c98:	494a      	ldr	r1, [pc, #296]	; (8000dc4 <serial_uart+0x1b8>)
 8000c9a:	484b      	ldr	r0, [pc, #300]	; (8000dc8 <serial_uart+0x1bc>)
 8000c9c:	f003 fe05 	bl	80048aa <HAL_UART_Transmit>
	   	  sprintf(buf, "%4d", error);
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <serial_uart+0x1c4>)
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4945      	ldr	r1, [pc, #276]	; (8000dc0 <serial_uart+0x1b4>)
 8000caa:	4846      	ldr	r0, [pc, #280]	; (8000dc4 <serial_uart+0x1b8>)
 8000cac:	f004 fdf6 	bl	800589c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 4, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	4943      	ldr	r1, [pc, #268]	; (8000dc4 <serial_uart+0x1b8>)
 8000cb8:	4843      	ldr	r0, [pc, #268]	; (8000dc8 <serial_uart+0x1bc>)
 8000cba:	f003 fdf6 	bl	80048aa <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <serial_uart+0x1b8>)
 8000cc0:	222c      	movs	r2, #44	; 0x2c
 8000cc2:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	2201      	movs	r2, #1
 8000cca:	493e      	ldr	r1, [pc, #248]	; (8000dc4 <serial_uart+0x1b8>)
 8000ccc:	483e      	ldr	r0, [pc, #248]	; (8000dc8 <serial_uart+0x1bc>)
 8000cce:	f003 fdec 	bl	80048aa <HAL_UART_Transmit>
	      sprintf(buf, "%4d", pwmVal);
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <serial_uart+0x1c8>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4939      	ldr	r1, [pc, #228]	; (8000dc0 <serial_uart+0x1b4>)
 8000cdc:	4839      	ldr	r0, [pc, #228]	; (8000dc4 <serial_uart+0x1b8>)
 8000cde:	f004 fddd 	bl	800589c <siprintf>
	      HAL_UART_Transmit(&huart3, buf, 4, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4936      	ldr	r1, [pc, #216]	; (8000dc4 <serial_uart+0x1b8>)
 8000cea:	4837      	ldr	r0, [pc, #220]	; (8000dc8 <serial_uart+0x1bc>)
 8000cec:	f003 fddd 	bl	80048aa <HAL_UART_Transmit>
	      OLED_ShowString(40, 20, buf);
 8000cf0:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <serial_uart+0x1b8>)
 8000cf2:	2114      	movs	r1, #20
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f000 fe8b 	bl	8001a10 <OLED_ShowString>
	      OLED_Refresh_Gram();
 8000cfa:	f000 fd5f 	bl	80017bc <OLED_Refresh_Gram>

	   	  buf[0]=',';
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <serial_uart+0x1b8>)
 8000d00:	222c      	movs	r2, #44	; 0x2c
 8000d02:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	2201      	movs	r2, #1
 8000d0a:	492e      	ldr	r1, [pc, #184]	; (8000dc4 <serial_uart+0x1b8>)
 8000d0c:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <serial_uart+0x1bc>)
 8000d0e:	f003 fdcc 	bl	80048aa <HAL_UART_Transmit>
	   	  sprintf(buf, "%5d", error_area);
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <serial_uart+0x1cc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4930      	ldr	r1, [pc, #192]	; (8000ddc <serial_uart+0x1d0>)
 8000d1a:	482a      	ldr	r0, [pc, #168]	; (8000dc4 <serial_uart+0x1b8>)
 8000d1c:	f004 fdbe 	bl	800589c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	2205      	movs	r2, #5
 8000d26:	4927      	ldr	r1, [pc, #156]	; (8000dc4 <serial_uart+0x1b8>)
 8000d28:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <serial_uart+0x1bc>)
 8000d2a:	f003 fdbe 	bl	80048aa <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <serial_uart+0x1b8>)
 8000d30:	222c      	movs	r2, #44	; 0x2c
 8000d32:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4922      	ldr	r1, [pc, #136]	; (8000dc4 <serial_uart+0x1b8>)
 8000d3c:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <serial_uart+0x1bc>)
 8000d3e:	f003 fdb4 	bl	80048aa <HAL_UART_Transmit>
	   	  sprintf(buf, "%3d", err);
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <serial_uart+0x1d4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4926      	ldr	r1, [pc, #152]	; (8000de4 <serial_uart+0x1d8>)
 8000d4a:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <serial_uart+0x1b8>)
 8000d4c:	f004 fda6 	bl	800589c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 3, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	2203      	movs	r2, #3
 8000d56:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <serial_uart+0x1b8>)
 8000d58:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <serial_uart+0x1bc>)
 8000d5a:	f003 fda6 	bl	80048aa <HAL_UART_Transmit>

	   	  buf[0]=',';
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <serial_uart+0x1b8>)
 8000d60:	222c      	movs	r2, #44	; 0x2c
 8000d62:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4916      	ldr	r1, [pc, #88]	; (8000dc4 <serial_uart+0x1b8>)
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <serial_uart+0x1bc>)
 8000d6e:	f003 fd9c 	bl	80048aa <HAL_UART_Transmit>
	   	  sprintf(buf, "%3d", error_rate);
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <serial_uart+0x1dc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fbde 	bl	8000538 <__aeabi_f2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <serial_uart+0x1d8>)
 8000d82:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <serial_uart+0x1b8>)
 8000d84:	f004 fd8a 	bl	800589c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 3, HAL_MAX_DELAY); // Send to Uart3 USB port
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <serial_uart+0x1b8>)
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <serial_uart+0x1bc>)
 8000d92:	f003 fd8a 	bl	80048aa <HAL_UART_Transmit>


	   	  buf[0] = '\r';
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <serial_uart+0x1b8>)
 8000d98:	220d      	movs	r2, #13
 8000d9a:	701a      	strb	r2, [r3, #0]
	   	  buf[1] = '\n';  // move to next line on serial port
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <serial_uart+0x1b8>)
 8000d9e:	220a      	movs	r2, #10
 8000da0:	705a      	strb	r2, [r3, #1]
	   	  HAL_UART_Transmit(&huart3, buf, 2, HAL_MAX_DELAY); // Send through BT @9600
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	2202      	movs	r2, #2
 8000da8:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <serial_uart+0x1b8>)
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <serial_uart+0x1bc>)
 8000dac:	f003 fd7d 	bl	80048aa <HAL_UART_Transmit>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000021e 	.word	0x2000021e
 8000db8:	3dd38ff1 	.word	0x3dd38ff1
 8000dbc:	20000220 	.word	0x20000220
 8000dc0:	080061b0 	.word	0x080061b0
 8000dc4:	20000214 	.word	0x20000214
 8000dc8:	200001b8 	.word	0x200001b8
 8000dcc:	20000222 	.word	0x20000222
 8000dd0:	20000224 	.word	0x20000224
 8000dd4:	2000020c 	.word	0x2000020c
 8000dd8:	20000228 	.word	0x20000228
 8000ddc:	080061c4 	.word	0x080061c4
 8000de0:	20000210 	.word	0x20000210
 8000de4:	080061c8 	.word	0x080061c8
 8000de8:	20000234 	.word	0x20000234

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f001 f977 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f99b 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 fb8f 	bl	800151c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dfe:	f000 f9ff 	bl	8001200 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e02:	f000 fb61 	bl	80014c8 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8000e06:	f000 fa7d 	bl	8001304 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e0a:	f000 fa27 	bl	800125c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e0e:	f000 fb31 	bl	8001474 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //start TIM8-PWM to drive the DC motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // on Motor A interface
 8000e12:	2100      	movs	r1, #0
 8000e14:	48a5      	ldr	r0, [pc, #660]	; (80010ac <main+0x2c0>)
 8000e16:	f002 fc33 	bl	8003680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);  // on Motor D interface
 8000e1a:	210c      	movs	r1, #12
 8000e1c:	48a3      	ldr	r0, [pc, #652]	; (80010ac <main+0x2c0>)
 8000e1e:	f002 fc2f 	bl	8003680 <HAL_TIM_PWM_Start>

  // start TIM2-Encoder to read Motor rotation in interrupt mode
  // Hall sensors produce 13 ticks/counts per turn, gear ratio = 20
  // 260 count per rotation of output (wheel)
  // 360 degree = 260 ticks/counts
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000e22:	213c      	movs	r1, #60	; 0x3c
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <main+0x2c4>)
 8000e26:	f002 fd99 	bl	800395c <HAL_TIM_Encoder_Start_IT>
  rpm = (int)((1000/no_of_tick) * 60/260);  // For calculating motor rpm - by multiplying it with speed value
 8000e2a:	4ba2      	ldr	r3, [pc, #648]	; (80010b4 <main+0x2c8>)
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e30:	461a      	mov	r2, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fb93 f2f2 	sdiv	r2, r3, r2
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <main+0x2cc>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	11d2      	asrs	r2, r2, #7
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	4b9a      	ldr	r3, [pc, #616]	; (80010bc <main+0x2d0>)
 8000e52:	801a      	strh	r2, [r3, #0]

  OLED_Init();
 8000e54:	f000 fe0e 	bl	8001a74 <OLED_Init>
  OLED_ShowString(10, 5, "SC2104/CE3002"); // show message on OLED display at line 10)
 8000e58:	4a99      	ldr	r2, [pc, #612]	; (80010c0 <main+0x2d4>)
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f000 fdd7 	bl	8001a10 <OLED_ShowString>

  oled_buf = "Lab 4"; // anther way to show message through buffer
 8000e62:	4b98      	ldr	r3, [pc, #608]	; (80010c4 <main+0x2d8>)
 8000e64:	613b      	str	r3, [r7, #16]
  OLED_ShowString(40,30, oled_buf); //another message at line 50
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	211e      	movs	r1, #30
 8000e6a:	2028      	movs	r0, #40	; 0x28
 8000e6c:	f000 fdd0 	bl	8001a10 <OLED_ShowString>

  oled_buf = "DC Motor"; // anther way to show message through buffer
 8000e70:	4b95      	ldr	r3, [pc, #596]	; (80010c8 <main+0x2dc>)
 8000e72:	613b      	str	r3, [r7, #16]
  OLED_ShowString(30,50, oled_buf); //another message at line 50
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	2132      	movs	r1, #50	; 0x32
 8000e78:	201e      	movs	r0, #30
 8000e7a:	f000 fdc9 	bl	8001a10 <OLED_ShowString>

  uint8_t sbuf[] = "SC2104\n\r";  // send to serial port
 8000e7e:	4a93      	ldr	r2, [pc, #588]	; (80010cc <main+0x2e0>)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e84:	c303      	stmia	r3!, {r0, r1}
 8000e86:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through Serial Port @115200
 8000e88:	1d39      	adds	r1, r7, #4
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	2209      	movs	r2, #9
 8000e90:	488f      	ldr	r0, [pc, #572]	; (80010d0 <main+0x2e4>)
 8000e92:	f003 fd0a 	bl	80048aa <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through BT @9600

  OLED_Refresh_Gram();
 8000e96:	f000 fc91 	bl	80017bc <OLED_Refresh_Gram>
  HAL_Delay(2000); // pause for 2 second to show message
 8000e9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e9e:	f001 f993 	bl	80021c8 <HAL_Delay>
  OLED_Clear(); // get display ready
 8000ea2:	f000 fcc3 	bl	800182c <OLED_Clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  start = 0;
 8000ea6:	4b8b      	ldr	r3, [pc, #556]	; (80010d4 <main+0x2e8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
  angle = 0;
 8000eac:	4b8a      	ldr	r3, [pc, #552]	; (80010d8 <main+0x2ec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	801a      	strh	r2, [r3, #0]
  target_angle = 720; // rotate 720 degree
 8000eb2:	4b8a      	ldr	r3, [pc, #552]	; (80010dc <main+0x2f0>)
 8000eb4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000eb8:	801a      	strh	r2, [r3, #0]
  error = target_angle - angle;
 8000eba:	4b88      	ldr	r3, [pc, #544]	; (80010dc <main+0x2f0>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b85      	ldr	r3, [pc, #532]	; (80010d8 <main+0x2ec>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b83      	ldr	r3, [pc, #524]	; (80010e0 <main+0x2f4>)
 8000ed2:	801a      	strh	r2, [r3, #0]
  error_old = 0;
 8000ed4:	4b83      	ldr	r3, [pc, #524]	; (80010e4 <main+0x2f8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
  error_area = 0;
 8000eda:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <main+0x2fc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

  // motor drive here
  OLED_Clear();
 8000ee0:	f000 fca4 	bl	800182c <OLED_Clear>
  OLED_ShowString(0, 0, "Target: ");
 8000ee4:	4a81      	ldr	r2, [pc, #516]	; (80010ec <main+0x300>)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 fd91 	bl	8001a10 <OLED_ShowString>
  OLED_ShowString(0, 10, "Rotated:");
 8000eee:	4a80      	ldr	r2, [pc, #512]	; (80010f0 <main+0x304>)
 8000ef0:	210a      	movs	r1, #10
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fd8c 	bl	8001a10 <OLED_ShowString>
  OLED_ShowString(0, 20, "PWM:+");
 8000ef8:	4a7e      	ldr	r2, [pc, #504]	; (80010f4 <main+0x308>)
 8000efa:	2114      	movs	r1, #20
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 fd87 	bl	8001a10 <OLED_ShowString>
  sprintf(buf, "%4d", target_angle);//Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulse per revolution
 8000f02:	4b76      	ldr	r3, [pc, #472]	; (80010dc <main+0x2f0>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	497b      	ldr	r1, [pc, #492]	; (80010f8 <main+0x30c>)
 8000f0c:	487b      	ldr	r0, [pc, #492]	; (80010fc <main+0x310>)
 8000f0e:	f004 fcc5 	bl	800589c <siprintf>
  OLED_ShowString(50, 0, buf);
 8000f12:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <main+0x310>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	2032      	movs	r0, #50	; 0x32
 8000f18:	f000 fd7a 	bl	8001a10 <OLED_ShowString>
  OLED_Refresh_Gram();
 8000f1c:	f000 fc4e 	bl	80017bc <OLED_Refresh_Gram>

  Kp = 20;       // 10
 8000f20:	4b77      	ldr	r3, [pc, #476]	; (8001100 <main+0x314>)
 8000f22:	2214      	movs	r2, #20
 8000f24:	801a      	strh	r2, [r3, #0]
  Ki = 0.001;   // 0.001
 8000f26:	4b77      	ldr	r3, [pc, #476]	; (8001104 <main+0x318>)
 8000f28:	4a77      	ldr	r2, [pc, #476]	; (8001108 <main+0x31c>)
 8000f2a:	601a      	str	r2, [r3, #0]
  Kd = 0;
 8000f2c:	4b77      	ldr	r3, [pc, #476]	; (800110c <main+0x320>)
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  millisOld = HAL_GetTick(); // get time value before starting - for PID
 8000f34:	f001 f93c 	bl	80021b0 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b74      	ldr	r3, [pc, #464]	; (8001110 <main+0x324>)
 8000f3e:	601a      	str	r2, [r3, #0]

  start = 1; // do a step response upon reset and power up
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <main+0x2e8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  if (start==0){ // reset and wait for the User PB to be pressed
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <main+0x2e8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d13d      	bne.n	8000fca <main+0x1de>
    	  pwmVal = 0;
 8000f4e:	4b71      	ldr	r3, [pc, #452]	; (8001114 <main+0x328>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	801a      	strh	r2, [r3, #0]
      	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_4,pwmVal);
 8000f54:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <main+0x328>)
 8000f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <main+0x2c0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
    	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
 8000f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f64:	486c      	ldr	r0, [pc, #432]	; (8001118 <main+0x32c>)
 8000f66:	f001 fcac 	bl	80028c2 <HAL_GPIO_TogglePin>
    	  //OLED_Clear(); // get display ready
    	  OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 8000f6a:	4a6c      	ldr	r2, [pc, #432]	; (800111c <main+0x330>)
 8000f6c:	2128      	movs	r1, #40	; 0x28
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 fd4e 	bl	8001a10 <OLED_ShowString>
    	  OLED_ShowString(0, 50, "button to start"); // show message on OLED display at line 50)
 8000f74:	4a6a      	ldr	r2, [pc, #424]	; (8001120 <main+0x334>)
 8000f76:	2132      	movs	r1, #50	; 0x32
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fd49 	bl	8001a10 <OLED_ShowString>
    	  OLED_Refresh_Gram();
 8000f7e:	f000 fc1d 	bl	80017bc <OLED_Refresh_Gram>
    	  err = 0;// for checking whether error has settle down near to zero
 8000f82:	4b68      	ldr	r3, [pc, #416]	; (8001124 <main+0x338>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
    	  angle = 0;
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <main+0x2ec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
    	  error_old = 0;
 8000f8e:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <main+0x2f8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
    	  error_area = 0;
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <main+0x2fc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    	  error = target_angle - angle;
 8000f9a:	4b50      	ldr	r3, [pc, #320]	; (80010dc <main+0x2f0>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <main+0x2ec>)
 8000fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <main+0x2f4>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	      }
	  while (start==0){ //wait for the User PB to be pressed
 8000fb4:	e009      	b.n	8000fca <main+0x1de>
    	  HAL_Delay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f001 f905 	bl	80021c8 <HAL_Delay>
    	  millisOld = HAL_GetTick(); // get time value before starting - for PID
 8000fbe:	f001 f8f7 	bl	80021b0 <HAL_GetTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <main+0x324>)
 8000fc8:	601a      	str	r2, [r3, #0]
	  while (start==0){ //wait for the User PB to be pressed
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <main+0x2e8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f1      	beq.n	8000fb6 <main+0x1ca>
		  }

	  pwmVal = PID_Control(); // call the PID control loop calculation
 8000fd2:	f7ff fd4b 	bl	8000a6c <PID_Control>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <main+0x328>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	  pwmVal = 2000;          // overwrite PID control above, minimum pwmVal = 1000?
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <main+0x328>)
 8000fe0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fe4:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_4,pwmVal); // output PWM waveform to drive motor
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <main+0x328>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <main+0x2c0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40

	  if (abs(error) < 3){ // error is less than 3 deg
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <main+0x2f4>)
 8000ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bfb8      	it	lt
 8000ffc:	425b      	neglt	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d822      	bhi.n	800104a <main+0x25e>
	      err++; // to keep track how long it has reached steady state
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <main+0x338>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a46      	ldr	r2, [pc, #280]	; (8001124 <main+0x338>)
 800100c:	6013      	str	r3, [r2, #0]
	      angle = (int)(position*360/260);  //calculate the angle
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <main+0x33c>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	461a      	mov	r2, r3
 8001016:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <main+0x2cc>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	11d2      	asrs	r2, r2, #7
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <main+0x2ec>)
 800102e:	801a      	strh	r2, [r3, #0]
	      error = target_angle - angle; // calculate the error
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <main+0x2f0>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <main+0x2ec>)
 800103a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103e:	b29b      	uxth	r3, r3
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <main+0x2f4>)
 8001048:	801a      	strh	r2, [r3, #0]
	      }

	  serial_uart(); // send the various data to the serial port for display
 800104a:	f7ff fddf 	bl	8000c0c <serial_uart>

      if (err > 5) { // error has settled to within the acceptance ranges
 800104e:	4b35      	ldr	r3, [pc, #212]	; (8001124 <main+0x338>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	f77f af77 	ble.w	8000f46 <main+0x15a>
	   	 pwmVal = 0; //stop
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <main+0x328>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
   	     __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_4,pwmVal);
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <main+0x328>)
 8001060:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <main+0x2c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
   	     //continue to send the data values for display
   	     for (i=0; i<50; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]
 800106e:	e007      	b.n	8001080 <main+0x294>
   	    	serial_uart();
 8001070:	f7ff fdcc 	bl	8000c0c <serial_uart>
   	     for (i=0; i<50; i++)
 8001074:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3301      	adds	r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	75fb      	strb	r3, [r7, #23]
 8001080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001084:	2b31      	cmp	r3, #49	; 0x31
 8001086:	ddf3      	ble.n	8001070 <main+0x284>

   	     start = 0;  // wait for PB to restart
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <main+0x2e8>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 800108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001092:	4826      	ldr	r0, [pc, #152]	; (800112c <main+0x340>)
 8001094:	f001 fc15 	bl	80028c2 <HAL_GPIO_TogglePin>
   	     HAL_Delay(500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f001 f894 	bl	80021c8 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 80010a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <main+0x340>)
 80010a6:	f001 fc0c 	bl	80028c2 <HAL_GPIO_TogglePin>
	  if (start==0){ // reset and wait for the User PB to be pressed
 80010aa:	e74c      	b.n	8000f46 <main+0x15a>
 80010ac:	2000012c 	.word	0x2000012c
 80010b0:	200000e4 	.word	0x200000e4
 80010b4:	20000000 	.word	0x20000000
 80010b8:	7e07e07f 	.word	0x7e07e07f
 80010bc:	20000204 	.word	0x20000204
 80010c0:	080061cc 	.word	0x080061cc
 80010c4:	080061dc 	.word	0x080061dc
 80010c8:	080061e4 	.word	0x080061e4
 80010cc:	0800622c 	.word	0x0800622c
 80010d0:	200001b8 	.word	0x200001b8
 80010d4:	20000208 	.word	0x20000208
 80010d8:	20000220 	.word	0x20000220
 80010dc:	20000222 	.word	0x20000222
 80010e0:	20000224 	.word	0x20000224
 80010e4:	2000022c 	.word	0x2000022c
 80010e8:	20000228 	.word	0x20000228
 80010ec:	080061f0 	.word	0x080061f0
 80010f0:	080061fc 	.word	0x080061fc
 80010f4:	08006208 	.word	0x08006208
 80010f8:	080061b0 	.word	0x080061b0
 80010fc:	20000214 	.word	0x20000214
 8001100:	20000244 	.word	0x20000244
 8001104:	2000024c 	.word	0x2000024c
 8001108:	3a83126f 	.word	0x3a83126f
 800110c:	20000248 	.word	0x20000248
 8001110:	20000238 	.word	0x20000238
 8001114:	2000020c 	.word	0x2000020c
 8001118:	40021000 	.word	0x40021000
 800111c:	08006210 	.word	0x08006210
 8001120:	0800621c 	.word	0x0800621c
 8001124:	20000210 	.word	0x20000210
 8001128:	2000021e 	.word	0x2000021e
 800112c:	40020400 	.word	0x40020400

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fba4 	bl	800588c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xc8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <SystemClock_Config+0xc8>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemClock_Config+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <SystemClock_Config+0xcc>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011a4:	2348      	movs	r3, #72	; 0x48
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fd23 	bl	8002c00 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c0:	f000 faac 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2102      	movs	r1, #2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ff85 	bl	80030f0 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ec:	f000 fa96 	bl	800171c <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	; 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C1_Init+0x50>)
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <MX_I2C1_Init+0x54>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_I2C1_Init+0x50>)
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_I2C1_Init+0x58>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_I2C1_Init+0x50>)
 800121e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C1_Init+0x50>)
 800123e:	f001 fb73 	bl	8002928 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 fa68 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000090 	.word	0x20000090
 8001254:	40005400 	.word	0x40005400
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fb0e 	bl	800588c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_TIM2_Init+0xa4>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM2_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM2_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM2_Init+0xa4>)
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM2_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM2_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012b0:	230a      	movs	r3, #10
 80012b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012c0:	230a      	movs	r3, #10
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM2_Init+0xa4>)
 80012cc:	f002 faa0 	bl	8003810 <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012d6:	f000 fa21 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM2_Init+0xa4>)
 80012e8:	f003 f9b0 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012f2:	f000 fa13 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000e4 	.word	0x200000e4

08001304 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b096      	sub	sp, #88	; 0x58
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2220      	movs	r2, #32
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 faa5 	bl	800588c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <MX_TIM8_Init+0x168>)
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <MX_TIM8_Init+0x16c>)
 8001346:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <MX_TIM8_Init+0x168>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <MX_TIM8_Init+0x168>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <MX_TIM8_Init+0x168>)
 8001356:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800135a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <MX_TIM8_Init+0x168>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <MX_TIM8_Init+0x168>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <MX_TIM8_Init+0x168>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800136e:	483f      	ldr	r0, [pc, #252]	; (800146c <MX_TIM8_Init+0x168>)
 8001370:	f002 f8de 	bl	8003530 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800137a:	f000 f9cf 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001388:	4619      	mov	r1, r3
 800138a:	4838      	ldr	r0, [pc, #224]	; (800146c <MX_TIM8_Init+0x168>)
 800138c:	f002 fd5e 	bl	8003e4c <HAL_TIM_ConfigClockSource>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001396:	f000 f9c1 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800139a:	4834      	ldr	r0, [pc, #208]	; (800146c <MX_TIM8_Init+0x168>)
 800139c:	f002 f917 	bl	80035ce <HAL_TIM_PWM_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80013a6:	f000 f9b9 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b6:	4619      	mov	r1, r3
 80013b8:	482c      	ldr	r0, [pc, #176]	; (800146c <MX_TIM8_Init+0x168>)
 80013ba:	f003 f947 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80013c4:	f000 f9aa 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c8:	2360      	movs	r3, #96	; 0x60
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	481f      	ldr	r0, [pc, #124]	; (800146c <MX_TIM8_Init+0x168>)
 80013ee:	f002 fc6b 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80013f8:	f000 f990 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	2204      	movs	r2, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <MX_TIM8_Init+0x168>)
 8001406:	f002 fc5f 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001410:	f000 f984 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM8_Init+0x168>)
 800141e:	f002 fc53 	bl	8003cc8 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001428:	f000 f978 	bl	800171c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM8_Init+0x168>)
 8001450:	f003 f978 	bl	8004744 <HAL_TIMEx_ConfigBreakDeadTime>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800145a:	f000 f95f 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM8_Init+0x168>)
 8001460:	f000 fc82 	bl	8001d68 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3758      	adds	r7, #88	; 0x58
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000012c 	.word	0x2000012c
 8001470:	40010400 	.word	0x40010400

08001474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f003 f9b0 	bl	8004810 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f931 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000174 	.word	0x20000174
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART3_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART3_UART_Init+0x4c>)
 8001500:	f003 f986 	bl	8004810 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f000 f907 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001b8 	.word	0x200001b8
 8001518:	40004800 	.word	0x40004800

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	4b74      	ldr	r3, [pc, #464]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a73      	ldr	r2, [pc, #460]	; (8001708 <MX_GPIO_Init+0x1ec>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <MX_GPIO_Init+0x1ec>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <MX_GPIO_Init+0x1ec>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a5e      	ldr	r2, [pc, #376]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b58      	ldr	r3, [pc, #352]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a57      	ldr	r2, [pc, #348]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a50      	ldr	r2, [pc, #320]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED1_Pin|OLED2_Pin|OLED3_Pin|OLED4_Pin
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80015e0:	484a      	ldr	r0, [pc, #296]	; (800170c <MX_GPIO_Init+0x1f0>)
 80015e2:	f001 f955 	bl	8002890 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	213c      	movs	r1, #60	; 0x3c
 80015ea:	4849      	ldr	r0, [pc, #292]	; (8001710 <MX_GPIO_Init+0x1f4>)
 80015ec:	f001 f950 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|DIN1_Pin|DIN2_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 410c 	mov.w	r1, #35840	; 0x8c00
 80015f6:	4847      	ldr	r0, [pc, #284]	; (8001714 <MX_GPIO_Init+0x1f8>)
 80015f8:	f001 f94a 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED1_Pin OLED2_Pin OLED3_Pin OLED4_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = OLED1_Pin|OLED2_Pin|OLED3_Pin|OLED4_Pin
 80015fc:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001600:	61fb      	str	r3, [r7, #28]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	483d      	ldr	r0, [pc, #244]	; (800170c <MX_GPIO_Init+0x1f0>)
 8001616:	f000 ff9f 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800161a:	233c      	movs	r3, #60	; 0x3c
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4837      	ldr	r0, [pc, #220]	; (8001710 <MX_GPIO_Init+0x1f4>)
 8001632:	f000 ff91 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin DIN1_Pin DIN2_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|DIN1_Pin|DIN2_Pin;
 8001636:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4831      	ldr	r0, [pc, #196]	; (8001714 <MX_GPIO_Init+0x1f8>)
 8001650:	f000 ff82 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	482b      	ldr	r0, [pc, #172]	; (8001718 <MX_GPIO_Init+0x1fc>)
 800166c:	f000 ff74 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ch_B_Pin */
  GPIO_InitStruct.Pin = Ch_B_Pin;
 8001670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001676:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Ch_B_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4822      	ldr	r0, [pc, #136]	; (8001710 <MX_GPIO_Init+0x1f4>)
 8001688:	f000 ff66 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ch_A_Pin */
  GPIO_InitStruct.Pin = Ch_A_Pin;
 800168c:	2308      	movs	r3, #8
 800168e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001690:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Ch_A_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_GPIO_Init+0x1f8>)
 80016a2:	f000 ff59 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4814      	ldr	r0, [pc, #80]	; (800170c <MX_GPIO_Init+0x1f0>)
 80016bc:	f000 ff4c 	bl	8002558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2007      	movs	r0, #7
 80016c6:	f000 fe7e 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016ca:	2007      	movs	r0, #7
 80016cc:	f000 fe97 	bl	80023fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2009      	movs	r0, #9
 80016d6:	f000 fe76 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016da:	2009      	movs	r0, #9
 80016dc:	f000 fe8f 	bl	80023fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2017      	movs	r0, #23
 80016e6:	f000 fe6e 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ea:	2017      	movs	r0, #23
 80016ec:	f000 fe87 	bl	80023fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2028      	movs	r0, #40	; 0x28
 80016f6:	f000 fe66 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fa:	2028      	movs	r0, #40	; 0x28
 80016fc:	f000 fe7f 	bl	80023fe <HAL_NVIC_EnableIRQ>

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020c00 	.word	0x40020c00

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <OLED_WR_Byte>:
#include <oled.h>
#include <oledfont.h>
#include "stdlib.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d106      	bne.n	800174c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <OLED_WR_Byte+0x90>)
 8001746:	f001 f8a3 	bl	8002890 <HAL_GPIO_WritePin>
 800174a:	e005      	b.n	8001758 <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <OLED_WR_Byte+0x90>)
 8001754:	f001 f89c 	bl	8002890 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e01e      	b.n	800179c <OLED_WR_Byte+0x74>
	{	OLED_SCLK_Clr();  // clear the clock
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4815      	ldr	r0, [pc, #84]	; (80017b8 <OLED_WR_Byte+0x90>)
 8001764:	f001 f894 	bl	8002890 <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da05      	bge.n	800177c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001770:	2201      	movs	r2, #1
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <OLED_WR_Byte+0x90>)
 8001776:	f001 f88b 	bl	8002890 <HAL_GPIO_WritePin>
 800177a:	e004      	b.n	8001786 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800177c:	2200      	movs	r2, #0
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <OLED_WR_Byte+0x90>)
 8001782:	f001 f885 	bl	8002890 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001786:	2201      	movs	r2, #1
 8001788:	2120      	movs	r1, #32
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <OLED_WR_Byte+0x90>)
 800178c:	f001 f880 	bl	8002890 <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3301      	adds	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d9dd      	bls.n	800175e <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <OLED_WR_Byte+0x90>)
 80017aa:	f001 f871 	bl	8002890 <HAL_GPIO_WritePin>
} 
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e026      	b.n	8001816 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	3b50      	subs	r3, #80	; 0x50
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffa9 	bl	8001728 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 80017d6:	2100      	movs	r1, #0
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff ffa5 	bl	8001728 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80017de:	2100      	movs	r1, #0
 80017e0:	2010      	movs	r0, #16
 80017e2:	f7ff ffa1 	bl	8001728 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80017e6:	2300      	movs	r3, #0
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	e00d      	b.n	8001808 <OLED_Refresh_Gram+0x4c>
 80017ec:	79ba      	ldrb	r2, [r7, #6]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	490d      	ldr	r1, [pc, #52]	; (8001828 <OLED_Refresh_Gram+0x6c>)
 80017f2:	00d2      	lsls	r2, r2, #3
 80017f4:	440a      	add	r2, r1
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff93 	bl	8001728 <OLED_WR_Byte>
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	3301      	adds	r3, #1
 8001806:	71bb      	strb	r3, [r7, #6]
 8001808:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	daed      	bge.n	80017ec <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	3301      	adds	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b07      	cmp	r3, #7
 800181a:	d9d5      	bls.n	80017c8 <OLED_Refresh_Gram+0xc>
	}
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000250 	.word	0x20000250

0800182c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e014      	b.n	8001862 <OLED_Clear+0x36>
 8001838:	2300      	movs	r3, #0
 800183a:	71bb      	strb	r3, [r7, #6]
 800183c:	e00a      	b.n	8001854 <OLED_Clear+0x28>
 800183e:	79ba      	ldrb	r2, [r7, #6]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	490c      	ldr	r1, [pc, #48]	; (8001874 <OLED_Clear+0x48>)
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	440a      	add	r2, r1
 8001848:	4413      	add	r3, r2
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	3301      	adds	r3, #1
 8001852:	71bb      	strb	r3, [r7, #6]
 8001854:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	daf0      	bge.n	800183e <OLED_Clear+0x12>
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	3301      	adds	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b07      	cmp	r3, #7
 8001866:	d9e7      	bls.n	8001838 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001868:	f7ff ffa8 	bl	80017bc <OLED_Refresh_Gram>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000250 	.word	0x20000250

08001878 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	460b      	mov	r3, r1
 8001884:	71bb      	strb	r3, [r7, #6]
 8001886:	4613      	mov	r3, r2
 8001888:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db41      	blt.n	800191a <OLED_DrawPoint+0xa2>
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	2b3f      	cmp	r3, #63	; 0x3f
 800189a:	d83e      	bhi.n	800191a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2201      	movs	r2, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d012      	beq.n	80018ea <OLED_DrawPoint+0x72>
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	4917      	ldr	r1, [pc, #92]	; (8001928 <OLED_DrawPoint+0xb0>)
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	440a      	add	r2, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	7818      	ldrb	r0, [r3, #0]
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	7bf9      	ldrb	r1, [r7, #15]
 80018d8:	4301      	orrs	r1, r0
 80018da:	b2c8      	uxtb	r0, r1
 80018dc:	4912      	ldr	r1, [pc, #72]	; (8001928 <OLED_DrawPoint+0xb0>)
 80018de:	00d2      	lsls	r2, r2, #3
 80018e0:	440a      	add	r2, r1
 80018e2:	4413      	add	r3, r2
 80018e4:	4602      	mov	r2, r0
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e018      	b.n	800191c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <OLED_DrawPoint+0xb0>)
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	440a      	add	r2, r1
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25a      	sxtb	r2, r3
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	43db      	mvns	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4013      	ands	r3, r2
 8001904:	b259      	sxtb	r1, r3
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	b2c8      	uxtb	r0, r1
 800190c:	4906      	ldr	r1, [pc, #24]	; (8001928 <OLED_DrawPoint+0xb0>)
 800190e:	00d2      	lsls	r2, r2, #3
 8001910:	440a      	add	r2, r1
 8001912:	4413      	add	r3, r2
 8001914:	4602      	mov	r2, r0
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	e000      	b.n	800191c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800191a:	bf00      	nop
}
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000250 	.word	0x20000250

0800192c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4604      	mov	r4, r0
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	4603      	mov	r3, r0
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	460b      	mov	r3, r1
 8001944:	717b      	strb	r3, [r7, #5]
 8001946:	4613      	mov	r3, r2
 8001948:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800194e:	797b      	ldrb	r3, [r7, #5]
 8001950:	3b20      	subs	r3, #32
 8001952:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001954:	2300      	movs	r3, #0
 8001956:	73bb      	strb	r3, [r7, #14]
 8001958:	e04d      	b.n	80019f6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800195a:	793b      	ldrb	r3, [r7, #4]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d10b      	bne.n	8001978 <OLED_ShowChar+0x4c>
 8001960:	797a      	ldrb	r2, [r7, #5]
 8001962:	7bb9      	ldrb	r1, [r7, #14]
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <OLED_ShowChar+0xdc>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4403      	add	r3, r0
 8001970:	440b      	add	r3, r1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	e007      	b.n	8001988 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001978:	797a      	ldrb	r2, [r7, #5]
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	4923      	ldr	r1, [pc, #140]	; (8001a0c <OLED_ShowChar+0xe0>)
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	440a      	add	r2, r1
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001988:	2300      	movs	r3, #0
 800198a:	737b      	strb	r3, [r7, #13]
 800198c:	e02d      	b.n	80019ea <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da07      	bge.n	80019a6 <OLED_ShowChar+0x7a>
 8001996:	f897 2020 	ldrb.w	r2, [r7, #32]
 800199a:	79b9      	ldrb	r1, [r7, #6]
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff6a 	bl	8001878 <OLED_DrawPoint>
 80019a4:	e00c      	b.n	80019c0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80019a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	79b9      	ldrb	r1, [r7, #6]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff5c 	bl	8001878 <OLED_DrawPoint>
			temp<<=1;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
			y++;
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	3301      	adds	r3, #1
 80019ca:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	7b3b      	ldrb	r3, [r7, #12]
 80019d0:	1ad2      	subs	r2, r2, r3
 80019d2:	793b      	ldrb	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d105      	bne.n	80019e4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80019d8:	7b3b      	ldrb	r3, [r7, #12]
 80019da:	71bb      	strb	r3, [r7, #6]
				x++;
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	3301      	adds	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
				break;
 80019e2:	e005      	b.n	80019f0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	3301      	adds	r3, #1
 80019e8:	737b      	strb	r3, [r7, #13]
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d9ce      	bls.n	800198e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73bb      	strb	r3, [r7, #14]
 80019f6:	7bba      	ldrb	r2, [r7, #14]
 80019f8:	793b      	ldrb	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3ad      	bcc.n	800195a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	08006238 	.word	0x08006238
 8001a0c:	080066ac 	.word	0x080066ac

08001a10 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4603      	mov	r3, r0
 8001a18:	603a      	str	r2, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001a20:	e01f      	b.n	8001a62 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b7a      	cmp	r3, #122	; 0x7a
 8001a26:	d904      	bls.n	8001a32 <OLED_ShowString+0x22>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	79bb      	ldrb	r3, [r7, #6]
 8001a2e:	3310      	adds	r3, #16
 8001a30:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	2b3a      	cmp	r3, #58	; 0x3a
 8001a36:	d905      	bls.n	8001a44 <OLED_ShowString+0x34>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	71bb      	strb	r3, [r7, #6]
 8001a40:	f7ff fef4 	bl	800182c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	79b9      	ldrb	r1, [r7, #6]
 8001a4a:	79f8      	ldrb	r0, [r7, #7]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	230c      	movs	r3, #12
 8001a52:	f7ff ff6b 	bl	800192c <OLED_ShowChar>
        x+=8;
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	3308      	adds	r3, #8
 8001a5a:	71fb      	strb	r3, [r7, #7]
        p++;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1db      	bne.n	8001a22 <OLED_ShowString+0x12>
    }  
}	 
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <OLED_Init>:

void OLED_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001a78:	f001 f89a 	bl	8002bb0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <OLED_Init+0x110>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a40      	ldr	r2, [pc, #256]	; (8001b84 <OLED_Init+0x110>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <OLED_Init+0x110>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <OLED_Init+0x110>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001a94:	f001 f8a0 	bl	8002bd8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	483a      	ldr	r0, [pc, #232]	; (8001b88 <OLED_Init+0x114>)
 8001a9e:	f000 fef7 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001aa2:	2064      	movs	r0, #100	; 0x64
 8001aa4:	f000 fb90 	bl	80021c8 <HAL_Delay>
	OLED_RST_Set();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	4836      	ldr	r0, [pc, #216]	; (8001b88 <OLED_Init+0x114>)
 8001aae:	f000 feef 	bl	8002890 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	20ae      	movs	r0, #174	; 0xae
 8001ab6:	f7ff fe37 	bl	8001728 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001aba:	2100      	movs	r1, #0
 8001abc:	20d5      	movs	r0, #213	; 0xd5
 8001abe:	f7ff fe33 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2050      	movs	r0, #80	; 0x50
 8001ac6:	f7ff fe2f 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001aca:	2100      	movs	r1, #0
 8001acc:	20a8      	movs	r0, #168	; 0xa8
 8001ace:	f7ff fe2b 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	203f      	movs	r0, #63	; 0x3f
 8001ad6:	f7ff fe27 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001ada:	2100      	movs	r1, #0
 8001adc:	20d3      	movs	r0, #211	; 0xd3
 8001ade:	f7ff fe23 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fe1f 	bl	8001728 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001aea:	2100      	movs	r1, #0
 8001aec:	2040      	movs	r0, #64	; 0x40
 8001aee:	f7ff fe1b 	bl	8001728 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001af2:	2100      	movs	r1, #0
 8001af4:	208d      	movs	r0, #141	; 0x8d
 8001af6:	f7ff fe17 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001afa:	2100      	movs	r1, #0
 8001afc:	2014      	movs	r0, #20
 8001afe:	f7ff fe13 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001b02:	2100      	movs	r1, #0
 8001b04:	2020      	movs	r0, #32
 8001b06:	f7ff fe0f 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fe0b 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001b12:	2100      	movs	r1, #0
 8001b14:	20a1      	movs	r0, #161	; 0xa1
 8001b16:	f7ff fe07 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	20c0      	movs	r0, #192	; 0xc0
 8001b1e:	f7ff fe03 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001b22:	2100      	movs	r1, #0
 8001b24:	20da      	movs	r0, #218	; 0xda
 8001b26:	f7ff fdff 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2012      	movs	r0, #18
 8001b2e:	f7ff fdfb 	bl	8001728 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001b32:	2100      	movs	r1, #0
 8001b34:	2081      	movs	r0, #129	; 0x81
 8001b36:	f7ff fdf7 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	20ef      	movs	r0, #239	; 0xef
 8001b3e:	f7ff fdf3 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001b42:	2100      	movs	r1, #0
 8001b44:	20d9      	movs	r0, #217	; 0xd9
 8001b46:	f7ff fdef 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	20f1      	movs	r0, #241	; 0xf1
 8001b4e:	f7ff fdeb 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001b52:	2100      	movs	r1, #0
 8001b54:	20db      	movs	r0, #219	; 0xdb
 8001b56:	f7ff fde7 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2030      	movs	r0, #48	; 0x30
 8001b5e:	f7ff fde3 	bl	8001728 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001b62:	2100      	movs	r1, #0
 8001b64:	20a4      	movs	r0, #164	; 0xa4
 8001b66:	f7ff fddf 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	20a6      	movs	r0, #166	; 0xa6
 8001b6e:	f7ff fddb 	bl	8001728 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001b72:	2100      	movs	r1, #0
 8001b74:	20af      	movs	r0, #175	; 0xaf
 8001b76:	f7ff fdd7 	bl	8001728 <OLED_WR_Byte>
	OLED_Clear(); 
 8001b7a:	f7ff fe57 	bl	800182c <OLED_Clear>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_MspInit+0x68>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_MspInit+0x68>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_MspInit+0x68>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_MspInit+0x68>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <HAL_MspInit+0x68>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_MspInit+0x68>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f000 fbf9 	bl	80023c6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bd4:	2005      	movs	r0, #5
 8001bd6:	f000 fc12 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2005      	movs	r0, #5
 8001be0:	f000 fbf1 	bl	80023c6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001be4:	2005      	movs	r0, #5
 8001be6:	f000 fc0a 	bl	80023fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_I2C_MspInit+0x84>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12c      	bne.n	8001c74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <HAL_I2C_MspInit+0x8c>)
 8001c54:	f000 fc80 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020400 	.word	0x40020400

08001c88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d133      	bne.n	8001d12 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4808      	ldr	r0, [pc, #32]	; (8001d20 <HAL_TIM_Encoder_MspInit+0x98>)
 8001cfe:	f000 fc2b 	bl	8002558 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	201c      	movs	r0, #28
 8001d08:	f000 fb5d 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f000 fb76 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_TIM_Base_MspInit+0x3c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10d      	bne.n	8001d52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_TIM_Base_MspInit+0x40>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_TIM_Base_MspInit+0x40>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_TIM_Base_MspInit+0x40>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010400 	.word	0x40010400
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_MspPostInit+0x68>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d11e      	bne.n	8001dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_MspPostInit+0x6c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMD_Pin;
 8001da6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001db8:	2303      	movs	r3, #3
 8001dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_TIM_MspPostInit+0x70>)
 8001dc4:	f000 fbc8 	bl	8002558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40010400 	.word	0x40010400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020800 	.word	0x40020800

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a36      	ldr	r2, [pc, #216]	; (8001ed4 <HAL_UART_MspInit+0xf8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d134      	bne.n	8001e68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e36:	2360      	movs	r3, #96	; 0x60
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e46:	2307      	movs	r3, #7
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4822      	ldr	r0, [pc, #136]	; (8001edc <HAL_UART_MspInit+0x100>)
 8001e52:	f000 fb81 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f000 fab3 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e60:	2026      	movs	r0, #38	; 0x26
 8001e62:	f000 facc 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e66:	e031      	b.n	8001ecc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_UART_MspInit+0x104>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12c      	bne.n	8001ecc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_UART_MspInit+0xfc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <HAL_UART_MspInit+0x108>)
 8001ec8:	f000 fb46 	bl	8002558 <HAL_GPIO_Init>
}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	; 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40004800 	.word	0x40004800
 8001ee4:	40020800 	.word	0x40020800

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	tick++;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <SysTick_Handler+0x48>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <SysTick_Handler+0x48>)
 8001f3c:	6013      	str	r3, [r2, #0]
	if (tick == no_of_tick)	{ // assuming 1 msec tick, calculate speed every 50 msec?
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <SysTick_Handler+0x48>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <SysTick_Handler+0x4c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d111      	bne.n	8001f6e <SysTick_Handler+0x3e>
//		speed = ((position - oldpos)*20*60/180);  // number of ticks/sec * 60 sec  diveide by 180 ticks per round
		speed = (position - oldpos); // change in position
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <SysTick_Handler+0x50>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <SysTick_Handler+0x54>)
 8001f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <SysTick_Handler+0x58>)
 8001f5c:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <SysTick_Handler+0x50>)
 8001f60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <SysTick_Handler+0x54>)
 8001f66:	801a      	strh	r2, [r3, #0]
		tick = 0;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <SysTick_Handler+0x48>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6e:	f000 f90b 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000654 	.word	0x20000654
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	2000021e 	.word	0x2000021e
 8001f84:	20000650 	.word	0x20000650
 8001f88:	20000202 	.word	0x20000202

08001f8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f000 fcaa 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ch_A_Pin);
 8001fac:	2008      	movs	r0, #8
 8001fae:	f000 fca3 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 8001fba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fbe:	f000 fc9b 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM2_IRQHandler+0x10>)
 8001fce:	f001 fd73 	bl	8003ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000e4 	.word	0x200000e4

08001fdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <USART2_IRQHandler+0x10>)
 8001fe2:	f002 fcf5 	bl	80049d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000174 	.word	0x20000174

08001ff0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ch_B_Pin);
 8001ff4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ff8:	f000 fc7e 	bl	80028f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f003 fc02 	bl	8005838 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	20000658 	.word	0x20000658
 8002068:	20000670 	.word	0x20000670

0800206c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002096:	490e      	ldr	r1, [pc, #56]	; (80020d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020ac:	4c0b      	ldr	r4, [pc, #44]	; (80020dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ba:	f7ff ffd7 	bl	800206c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f003 fbc1 	bl	8005844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c2:	f7fe fe93 	bl	8000dec <main>
  bx  lr    
 80020c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020d4:	08006cf8 	.word	0x08006cf8
  ldr r2, =_sbss
 80020d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020dc:	20000670 	.word	0x20000670

080020e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f94f 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	200f      	movs	r0, #15
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fd38 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f967 	bl	800241a <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f92f 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000004 	.word	0x20000004
 8002180:	2000000c 	.word	0x2000000c
 8002184:	20000008 	.word	0x20000008

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	2000065c 	.word	0x2000065c

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000065c 	.word	0x2000065c

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000000c 	.word	0x2000000c

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff feb6 	bl	80021b0 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d008      	beq.n	8002464 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e052      	b.n	800250a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0216 	bic.w	r2, r2, #22
 8002472:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002482:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <HAL_DMA_Abort+0x62>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0208 	bic.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b4:	e013      	b.n	80024de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b6:	f7ff fe7b 	bl	80021b0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d90c      	bls.n	80024de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e015      	b.n	800250a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e4      	bne.n	80024b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e00c      	b.n	800254a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2205      	movs	r2, #5
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e16b      	b.n	800284c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 815a 	bne.w	8002846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d130      	bne.n	800260c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b03      	cmp	r3, #3
 8002616:	d017      	beq.n	8002648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80b4 	beq.w	8002846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <HAL_GPIO_Init+0x30c>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a5f      	ldr	r2, [pc, #380]	; (8002864 <HAL_GPIO_Init+0x30c>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_GPIO_Init+0x30c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_GPIO_Init+0x310>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x314>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x226>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_GPIO_Init+0x318>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x222>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_GPIO_Init+0x31c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x21e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4f      	ldr	r2, [pc, #316]	; (8002878 <HAL_GPIO_Init+0x320>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x21a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4e      	ldr	r2, [pc, #312]	; (800287c <HAL_GPIO_Init+0x324>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x216>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4d      	ldr	r2, [pc, #308]	; (8002880 <HAL_GPIO_Init+0x328>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x212>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_GPIO_Init+0x32c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4b      	ldr	r2, [pc, #300]	; (8002888 <HAL_GPIO_Init+0x330>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x20a>
 800275e:	2307      	movs	r3, #7
 8002760:	e00e      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002762:	2308      	movs	r3, #8
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002766:	2306      	movs	r3, #6
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x228>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x228>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_GPIO_Init+0x310>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_GPIO_Init+0x334>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a32      	ldr	r2, [pc, #200]	; (800288c <HAL_GPIO_Init+0x334>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_GPIO_Init+0x334>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_GPIO_Init+0x334>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_GPIO_Init+0x334>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_GPIO_Init+0x334>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_GPIO_Init+0x334>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a12      	ldr	r2, [pc, #72]	; (800288c <HAL_GPIO_Init+0x334>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae90 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40021c00 	.word	0x40021c00
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	619a      	str	r2, [r3, #24]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d4:	887a      	ldrh	r2, [r7, #2]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	041a      	lsls	r2, r3, #16
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43d9      	mvns	r1, r3
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	400b      	ands	r3, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f818 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e12b      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff f952 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800297a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800298a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800298c:	f000 fda8 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8002990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a81      	ldr	r2, [pc, #516]	; (8002b9c <HAL_I2C_Init+0x274>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d807      	bhi.n	80029ac <HAL_I2C_Init+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a80      	ldr	r2, [pc, #512]	; (8002ba0 <HAL_I2C_Init+0x278>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e006      	b.n	80029ba <HAL_I2C_Init+0x92>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a7d      	ldr	r2, [pc, #500]	; (8002ba4 <HAL_I2C_Init+0x27c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	bf94      	ite	ls
 80029b4:	2301      	movls	r3, #1
 80029b6:	2300      	movhi	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0e7      	b.n	8002b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a78      	ldr	r2, [pc, #480]	; (8002ba8 <HAL_I2C_Init+0x280>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_I2C_Init+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d802      	bhi.n	80029fc <HAL_I2C_Init+0xd4>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e009      	b.n	8002a10 <HAL_I2C_Init+0xe8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a69      	ldr	r2, [pc, #420]	; (8002bac <HAL_I2C_Init+0x284>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	3301      	adds	r3, #1
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	495c      	ldr	r1, [pc, #368]	; (8002b9c <HAL_I2C_Init+0x274>)
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	d819      	bhi.n	8002a64 <HAL_I2C_Init+0x13c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e59      	subs	r1, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a44:	400b      	ands	r3, r1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_I2C_Init+0x138>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e59      	subs	r1, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5e:	e051      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e04f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <HAL_I2C_Init+0x168>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e012      	b.n	8002ab6 <HAL_I2C_Init+0x18e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x196>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_I2C_Init+0x1bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e58      	subs	r0, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Init+0x1dc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6809      	ldr	r1, [r1, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6911      	ldr	r1, [r2, #16]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000186a0 	.word	0x000186a0
 8002ba0:	001e847f 	.word	0x001e847f
 8002ba4:	003d08ff 	.word	0x003d08ff
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002bc2:	687b      	ldr	r3, [r7, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	420e0020 	.word	0x420e0020
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_PWR_DisableBkUpAccess+0x24>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002bea:	687b      	ldr	r3, [r7, #4]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	420e0020 	.word	0x420e0020
 8002bfc:	40007000 	.word	0x40007000

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e267      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d075      	beq.n	8002d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d112      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b82      	ldr	r3, [pc, #520]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05b      	beq.n	8002d08 <HAL_RCC_OscConfig+0x108>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e242      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x74>
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a75      	ldr	r2, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b70      	ldr	r3, [pc, #448]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6c      	ldr	r2, [pc, #432]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a68      	ldr	r2, [pc, #416]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fa7a 	bl	80021b0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fa76 	bl	80021b0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e207      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff fa66 	bl	80021b0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7ff fa62 	bl	80021b0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f3      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xe8>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7ff fa1b 	bl	80021b0 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7ff fa17 	bl	80021b0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a8      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4925      	ldr	r1, [pc, #148]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff f9fa 	bl	80021b0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7ff f9f6 	bl	80021b0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e187      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7ff f9da 	bl	80021b0 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e00:	f7ff f9d6 	bl	80021b0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e167      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7ff f9c3 	bl	80021b0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	e00e      	b.n	8002e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7ff f9bf 	bl	80021b0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d907      	bls.n	8002e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e150      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470000 	.word	0x42470000
 8002e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ea      	bne.n	8002e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8097 	beq.w	8002f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b7a      	ldr	r3, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b74      	ldr	r3, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7ff f97f 	bl	80021b0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7ff f97b 	bl	80021b0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e10c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x474>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x2ea>
 8002edc:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a63      	ldr	r2, [pc, #396]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x30c>
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a5b      	ldr	r2, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7ff f940 	bl	80021b0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7ff f93c 	bl	80021b0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0cb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	4b49      	ldr	r3, [pc, #292]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RCC_OscConfig+0x334>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7ff f92a 	bl	80021b0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7ff f926 	bl	80021b0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0b5      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a1 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d05c      	beq.n	8003064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d141      	bne.n	8003036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f8fa 	bl	80021b0 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7ff f8f6 	bl	80021b0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e087      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7ff f8cf 	bl	80021b0 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff f8cb 	bl	80021b0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e05c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x416>
 8003034:	e054      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff f8b8 	bl	80021b0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff f8b4 	bl	80021b0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x444>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e038      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x4ec>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d121      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe ffe6 	bl	80021b0 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe ffe2 	bl	80021b0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe ff46 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08006c9c 	.word	0x08006c9c
 80032b4:	20000004 	.word	0x20000004
 80032b8:	20000008 	.word	0x20000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b094      	sub	sp, #80	; 0x50
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d4:	4b79      	ldr	r3, [pc, #484]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d00d      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	f200 80e1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ee:	e0db      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032f4:	e0db      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b73      	ldr	r3, [pc, #460]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fa:	e0d8      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
 800331c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
 800332a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4651      	mov	r1, sl
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4651      	mov	r1, sl
 8003370:	ebb2 0801 	subs.w	r8, r2, r1
 8003374:	4659      	mov	r1, fp
 8003376:	eb63 0901 	sbc.w	r9, r3, r1
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338e:	4690      	mov	r8, r2
 8003390:	4699      	mov	r9, r3
 8003392:	4623      	mov	r3, r4
 8003394:	eb18 0303 	adds.w	r3, r8, r3
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	462b      	mov	r3, r5
 800339c:	eb49 0303 	adc.w	r3, r9, r3
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ae:	4629      	mov	r1, r5
 80033b0:	024b      	lsls	r3, r1, #9
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b8:	4621      	mov	r1, r4
 80033ba:	024a      	lsls	r2, r1, #9
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033cc:	f7fd f90c 	bl	80005e8 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d8:	e058      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	4611      	mov	r1, r2
 80033e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
 80033f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	0159      	lsls	r1, r3, #5
 8003402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003406:	0150      	lsls	r0, r2, #5
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4641      	mov	r1, r8
 800340e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb63 0b01 	sbc.w	fp, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800342c:	ebb2 040a 	subs.w	r4, r2, sl
 8003430:	eb63 050b 	sbc.w	r5, r3, fp
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00eb      	lsls	r3, r5, #3
 800343e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	4643      	mov	r3, r8
 800344a:	18e3      	adds	r3, r4, r3
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	464b      	mov	r3, r9
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	f7fd f8b2 	bl	80005e8 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800349c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3750      	adds	r7, #80	; 0x50
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	08006cac 	.word	0x08006cac

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffdc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0b5b      	lsrs	r3, r3, #13
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	08006cac 	.word	0x08006cac

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e041      	b.n	80035c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fbe4 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 fd5c 	bl	800402c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e041      	b.n	8003664 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f839 	bl	800366c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f000 fd0d 	bl	800402c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_TIM_PWM_Start+0x24>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e022      	b.n	80036ea <HAL_TIM_PWM_Start+0x6a>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d109      	bne.n	80036be <HAL_TIM_PWM_Start+0x3e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e015      	b.n	80036ea <HAL_TIM_PWM_Start+0x6a>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d109      	bne.n	80036d8 <HAL_TIM_PWM_Start+0x58>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e008      	b.n	80036ea <HAL_TIM_PWM_Start+0x6a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07c      	b.n	80037ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Start+0x82>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003700:	e013      	b.n	800372a <HAL_TIM_PWM_Start+0xaa>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start+0x92>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003710:	e00b      	b.n	800372a <HAL_TIM_PWM_Start+0xaa>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d104      	bne.n	8003722 <HAL_TIM_PWM_Start+0xa2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	e003      	b.n	800372a <HAL_TIM_PWM_Start+0xaa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 ff64 	bl	8004600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <HAL_TIM_PWM_Start+0x174>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_PWM_Start+0xcc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <HAL_TIM_PWM_Start+0x178>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_TIM_PWM_Start+0xd0>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_TIM_PWM_Start+0xd2>
 8003750:	2300      	movs	r3, #0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_TIM_PWM_Start+0x174>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d01d      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_TIM_PWM_Start+0x17c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <HAL_TIM_PWM_Start+0x180>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_TIM_PWM_Start+0x184>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIM_PWM_Start+0x178>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIM_PWM_Start+0x188>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x136>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_TIM_PWM_Start+0x18c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d111      	bne.n	80037da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b06      	cmp	r3, #6
 80037c6:	d010      	beq.n	80037ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	e007      	b.n	80037ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40014000 	.word	0x40014000
 800380c:	40001800 	.word	0x40001800

08003810 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e097      	b.n	8003954 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fa25 	bl	8001c88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003854:	f023 0307 	bic.w	r3, r3, #7
 8003858:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 fbe1 	bl	800402c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	4313      	orrs	r3, r2
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038b0:	f023 030c 	bic.w	r3, r3, #12
 80038b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4313      	orrs	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	011a      	lsls	r2, r3, #4
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	031b      	lsls	r3, r3, #12
 80038e0:	4313      	orrs	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4313      	orrs	r3, r2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800396c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003974:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800397c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003984:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d110      	bne.n	80039ae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003992:	7b7b      	ldrb	r3, [r7, #13]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d001      	beq.n	800399c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e089      	b.n	8003ab0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	e031      	b.n	8003a12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d110      	bne.n	80039d6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039ba:	7b3b      	ldrb	r3, [r7, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e075      	b.n	8003ab0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	e01d      	b.n	8003a12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039dc:	7bbb      	ldrb	r3, [r7, #14]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039e2:	7b7b      	ldrb	r3, [r7, #13]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d102      	bne.n	80039ee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039e8:	7b3b      	ldrb	r3, [r7, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e05e      	b.n	8003ab0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d010      	beq.n	8003a40 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003a1e:	e01f      	b.n	8003a60 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fde9 	bl	8004600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0202 	orr.w	r2, r2, #2
 8003a3c:	60da      	str	r2, [r3, #12]
      break;
 8003a3e:	e02e      	b.n	8003a9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	2104      	movs	r1, #4
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fdd9 	bl	8004600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0204 	orr.w	r2, r2, #4
 8003a5c:	60da      	str	r2, [r3, #12]
      break;
 8003a5e:	e01e      	b.n	8003a9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fdc9 	bl	8004600 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	2104      	movs	r1, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fdc2 	bl	8004600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0202 	orr.w	r2, r2, #2
 8003a8a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0204 	orr.w	r2, r2, #4
 8003a9a:	60da      	str	r2, [r3, #12]
      break;
 8003a9c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0202 	mvn.w	r2, #2
 8003ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fc fef6 	bl	80008ec <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa73 	bl	8003fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa7a 	bl	8004002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0204 	mvn.w	r2, #4
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fecc 	bl	80008ec <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa49 	bl	8003fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa50 	bl	8004002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc fea2 	bl	80008ec <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa1f 	bl	8003fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa26 	bl	8004002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fc fe78 	bl	80008ec <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9f5 	bl	8003fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9fc 	bl	8004002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0201 	mvn.w	r2, #1
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9cf 	bl	8003fda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fdca 	bl	80047fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9c1 	bl	8004016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0220 	mvn.w	r2, #32
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fd94 	bl	80047e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ae      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f200 809f 	bhi.w	8003e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e35 	.word	0x08003e35
 8003d08:	08003e35 	.word	0x08003e35
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003e35 	.word	0x08003e35
 8003d14:	08003e35 	.word	0x08003e35
 8003d18:	08003e35 	.word	0x08003e35
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003e35 	.word	0x08003e35
 8003d24:	08003e35 	.word	0x08003e35
 8003d28:	08003e35 	.word	0x08003e35
 8003d2c:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa18 	bl	800416c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e064      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa68 	bl	800424c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e043      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fabd 	bl	8004338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e023      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fb11 	bl	8004420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
      break;
 8003e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_ConfigClockSource+0x1c>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0b4      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x186>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea0:	d03e      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea6:	f200 8087 	bhi.w	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	f000 8086 	beq.w	8003fbe <HAL_TIM_ConfigClockSource+0x172>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d87f      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b70      	cmp	r3, #112	; 0x70
 8003eba:	d01a      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8003ebc:	2b70      	cmp	r3, #112	; 0x70
 8003ebe:	d87b      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b60      	cmp	r3, #96	; 0x60
 8003ec2:	d050      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x11a>
 8003ec4:	2b60      	cmp	r3, #96	; 0x60
 8003ec6:	d877      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b50      	cmp	r3, #80	; 0x50
 8003eca:	d03c      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ecc:	2b50      	cmp	r3, #80	; 0x50
 8003ece:	d873      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d058      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x13a>
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d86f      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b30      	cmp	r3, #48	; 0x30
 8003eda:	d064      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b30      	cmp	r3, #48	; 0x30
 8003ede:	d86b      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d060      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d867      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05c      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d05a      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef0:	e062      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6899      	ldr	r1, [r3, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f000 fb5d 	bl	80045c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	609a      	str	r2, [r3, #8]
      break;
 8003f1e:	e04f      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f000 fb46 	bl	80045c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f42:	609a      	str	r2, [r3, #8]
      break;
 8003f44:	e03c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f000 faba 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2150      	movs	r1, #80	; 0x50
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb13 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003f64:	e02c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f000 fad9 	bl	800452a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2160      	movs	r1, #96	; 0x60
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fb03 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003f84:	e01c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f000 fa9a 	bl	80044cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2140      	movs	r1, #64	; 0x40
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 faf3 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003fa4:	e00c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f000 faea 	bl	800458a <TIM_ITRx_SetConfig>
      break;
 8003fb6:	e003      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a40      	ldr	r2, [pc, #256]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404a:	d00f      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <TIM_Base_SetConfig+0x118>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <TIM_Base_SetConfig+0x11c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3b      	ldr	r2, [pc, #236]	; (800414c <TIM_Base_SetConfig+0x120>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <TIM_Base_SetConfig+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d027      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <TIM_Base_SetConfig+0x118>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d023      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <TIM_Base_SetConfig+0x11c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01f      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <TIM_Base_SetConfig+0x120>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a29      	ldr	r2, [pc, #164]	; (8004150 <TIM_Base_SetConfig+0x124>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d017      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_Base_SetConfig+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <TIM_Base_SetConfig+0x12c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00f      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <TIM_Base_SetConfig+0x130>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a25      	ldr	r2, [pc, #148]	; (8004160 <TIM_Base_SetConfig+0x134>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a24      	ldr	r2, [pc, #144]	; (8004164 <TIM_Base_SetConfig+0x138>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a23      	ldr	r2, [pc, #140]	; (8004168 <TIM_Base_SetConfig+0x13c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0xf8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <TIM_Base_SetConfig+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	615a      	str	r2, [r3, #20]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40010400 	.word	0x40010400
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800
 8004160:	40001800 	.word	0x40001800
 8004164:	40001c00 	.word	0x40001c00
 8004168:	40002000 	.word	0x40002000

0800416c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 0302 	bic.w	r3, r3, #2
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a20      	ldr	r2, [pc, #128]	; (8004244 <TIM_OC1_SetConfig+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC1_SetConfig+0x64>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <TIM_OC1_SetConfig+0xdc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10c      	bne.n	80041ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0308 	bic.w	r3, r3, #8
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_OC1_SetConfig+0xd8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_OC1_SetConfig+0x8e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <TIM_OC1_SetConfig+0xdc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400

0800424c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0320 	bic.w	r3, r3, #32
 8004296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_OC2_SetConfig+0xe4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC2_SetConfig+0x68>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <TIM_OC2_SetConfig+0xe8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10d      	bne.n	80042d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC2_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC2_SetConfig+0x94>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <TIM_OC2_SetConfig+0xe8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d113      	bne.n	8004308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40010400 	.word	0x40010400

08004338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a21      	ldr	r2, [pc, #132]	; (8004418 <TIM_OC3_SetConfig+0xe0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_OC3_SetConfig+0x66>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <TIM_OC3_SetConfig+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10d      	bne.n	80043ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <TIM_OC3_SetConfig+0xe0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_OC3_SetConfig+0x92>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <TIM_OC3_SetConfig+0xe4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d113      	bne.n	80043f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	621a      	str	r2, [r3, #32]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40010000 	.word	0x40010000
 800441c:	40010400 	.word	0x40010400

08004420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <TIM_OC4_SetConfig+0xa4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_OC4_SetConfig+0x68>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <TIM_OC4_SetConfig+0xa8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d109      	bne.n	800449c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 030a 	bic.w	r3, r3, #10
 8004508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452a:	b480      	push	{r7}
 800452c:	b087      	sub	sp, #28
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0210 	bic.w	r2, r3, #16
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	031b      	lsls	r3, r3, #12
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f043 0307 	orr.w	r3, r3, #7
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2201      	movs	r2, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e05a      	b.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d01d      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10c      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40010400 	.word	0x40010400
 800473c:	40014000 	.word	0x40014000
 8004740:	40001800 	.word	0x40001800

08004744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e03d      	b.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e03f      	b.n	80048a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd fad0 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fd7b 	bl	8005350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b08a      	sub	sp, #40	; 0x28
 80048ae:	af02      	add	r7, sp, #8
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d17c      	bne.n	80049c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_UART_Transmit+0x2c>
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e075      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Transmit+0x3e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e06e      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2221      	movs	r2, #33	; 0x21
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fe:	f7fd fc57 	bl	80021b0 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	88fa      	ldrh	r2, [r7, #6]
 8004908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	88fa      	ldrh	r2, [r7, #6]
 800490e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d108      	bne.n	800492c <HAL_UART_Transmit+0x82>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e003      	b.n	8004934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800493c:	e02a      	b.n	8004994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 faf9 	bl	8004f40 <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e036      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3302      	adds	r3, #2
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e007      	b.n	8004986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1cf      	bne.n	800493e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2140      	movs	r1, #64	; 0x40
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fac9 	bl	8004f40 <UART_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e006      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e000      	b.n	80049c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0ba      	sub	sp, #232	; 0xe8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fbd3 	bl	80051da <UART_Receive_IT>
      return;
 8004a34:	e256      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80de 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
 8004a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d1 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
 8004a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 81ed 	beq.w	8004eda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb5e 	bl	80051da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_UART_IRQHandler+0x17a>
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa66 	bl	800501c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d141      	bne.n	8004be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d013      	beq.n	8004bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	4a7d      	ldr	r2, [pc, #500]	; (8004dac <HAL_UART_IRQHandler+0x3dc>)
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd fca7 	bl	8002512 <HAL_DMA_Abort_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00e      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f99a 	bl	8004f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00a      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f996 	bl	8004f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e006      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f992 	bl	8004f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bf6:	e170      	b.n	8004eda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	bf00      	nop
    return;
 8004bfa:	e16e      	b.n	8004eda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 814a 	bne.w	8004e9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8143 	beq.w	8004e9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 813c 	beq.w	8004e9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	f040 80b4 	bne.w	8004db0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8140 	beq.w	8004ede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f080 8139 	bcs.w	8004ede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	f000 8088 	beq.w	8004d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1d9      	bne.n	8004c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e1      	bne.n	8004cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd fb50 	bl	8002432 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8c0 	bl	8004f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004da8:	e099      	b.n	8004ede <HAL_UART_IRQHandler+0x50e>
 8004daa:	bf00      	nop
 8004dac:	080050e3 	.word	0x080050e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 808b 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e3      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e32:	633a      	str	r2, [r7, #48]	; 0x30
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e3      	bne.n	8004e0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e78:	61fa      	str	r2, [r7, #28]
 8004e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	617b      	str	r3, [r7, #20]
   return(result);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e3      	bne.n	8004e54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f848 	bl	8004f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e98:	e023      	b.n	8004ee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_UART_IRQHandler+0x4ea>
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f929 	bl	800510a <UART_Transmit_IT>
    return;
 8004eb8:	e014      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x514>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f969 	bl	80051aa <UART_EndTransmit_IT>
    return;
 8004ed8:	e004      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
    return;
 8004eda:	bf00      	nop
 8004edc:	e002      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ee2:	bf00      	nop
  }
}
 8004ee4:	37e8      	adds	r7, #232	; 0xe8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b090      	sub	sp, #64	; 0x40
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f50:	e050      	b.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d04c      	beq.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f60:	f7fd f926 	bl	80021b0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d241      	bcs.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f90:	637a      	str	r2, [r7, #52]	; 0x34
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc4:	623a      	str	r2, [r7, #32]
 8004fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	69f9      	ldr	r1, [r7, #28]
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e00f      	b.n	8005014 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	429a      	cmp	r2, r3
 8005010:	d09f      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3740      	adds	r7, #64	; 0x40
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b095      	sub	sp, #84	; 0x54
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005044:	643a      	str	r2, [r7, #64]	; 0x40
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800504a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e5      	bne.n	8005024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	61fb      	str	r3, [r7, #28]
   return(result);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d119      	bne.n	80050c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b4:	61ba      	str	r2, [r7, #24]
 80050b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050d6:	bf00      	nop
 80050d8:	3754      	adds	r7, #84	; 0x54
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff09 	bl	8004f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b21      	cmp	r3, #33	; 0x21
 800511c:	d13e      	bne.n	800519c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d114      	bne.n	8005152 <UART_Transmit_IT+0x48>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005144:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]
 8005150:	e008      	b.n	8005164 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6211      	str	r1, [r2, #32]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005186:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005196:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fe8e 	bl	8004eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b08c      	sub	sp, #48	; 0x30
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b22      	cmp	r3, #34	; 0x22
 80051ec:	f040 80ab 	bne.w	8005346 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f8:	d117      	bne.n	800522a <UART_Receive_IT+0x50>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d113      	bne.n	800522a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	b29a      	uxth	r2, r3
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28
 8005228:	e026      	b.n	8005278 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d007      	beq.n	800524e <UART_Receive_IT+0x74>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <UART_Receive_IT+0x82>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e008      	b.n	800526e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005268:	b2da      	uxtb	r2, r3
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29b      	uxth	r3, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4619      	mov	r1, r3
 8005286:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005288:	2b00      	cmp	r3, #0
 800528a:	d15a      	bne.n	8005342 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0220 	bic.w	r2, r2, #32
 800529a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0201 	bic.w	r2, r2, #1
 80052ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d135      	bne.n	8005338 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	613b      	str	r3, [r7, #16]
   return(result);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	623a      	str	r2, [r7, #32]
 80052f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	69f9      	ldr	r1, [r7, #28]
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d10a      	bne.n	800532a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fdf9 	bl	8004f28 <HAL_UARTEx_RxEventCallback>
 8005336:	e002      	b.n	800533e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fde1 	bl	8004f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e002      	b.n	8005348 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	e000      	b.n	8005348 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005346:	2302      	movs	r3, #2
  }
}
 8005348:	4618      	mov	r0, r3
 800534a:	3730      	adds	r7, #48	; 0x30
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005354:	b0c0      	sub	sp, #256	; 0x100
 8005356:	af00      	add	r7, sp, #0
 8005358:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	68d9      	ldr	r1, [r3, #12]
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	ea40 0301 	orr.w	r3, r0, r1
 8005378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	431a      	orrs	r2, r3
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	431a      	orrs	r2, r3
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053a8:	f021 010c 	bic.w	r1, r1, #12
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b6:	430b      	orrs	r3, r1
 80053b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	6999      	ldr	r1, [r3, #24]
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	ea40 0301 	orr.w	r3, r0, r1
 80053d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b8f      	ldr	r3, [pc, #572]	; (800561c <UART_SetConfig+0x2cc>)
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d005      	beq.n	80053f0 <UART_SetConfig+0xa0>
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b8d      	ldr	r3, [pc, #564]	; (8005620 <UART_SetConfig+0x2d0>)
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d104      	bne.n	80053fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7fe f88a 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80053f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053f8:	e003      	b.n	8005402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053fa:	f7fe f871 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 80053fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	f040 810c 	bne.w	8005628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800541a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800541e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	1891      	adds	r1, r2, r2
 8005428:	65b9      	str	r1, [r7, #88]	; 0x58
 800542a:	415b      	adcs	r3, r3
 800542c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005432:	4621      	mov	r1, r4
 8005434:	eb12 0801 	adds.w	r8, r2, r1
 8005438:	4629      	mov	r1, r5
 800543a:	eb43 0901 	adc.w	r9, r3, r1
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800544a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005452:	4690      	mov	r8, r2
 8005454:	4699      	mov	r9, r3
 8005456:	4623      	mov	r3, r4
 8005458:	eb18 0303 	adds.w	r3, r8, r3
 800545c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005460:	462b      	mov	r3, r5
 8005462:	eb49 0303 	adc.w	r3, r9, r3
 8005466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005476:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800547a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800547e:	460b      	mov	r3, r1
 8005480:	18db      	adds	r3, r3, r3
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	4613      	mov	r3, r2
 8005486:	eb42 0303 	adc.w	r3, r2, r3
 800548a:	657b      	str	r3, [r7, #84]	; 0x54
 800548c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005494:	f7fb f8a8 	bl	80005e8 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b61      	ldr	r3, [pc, #388]	; (8005624 <UART_SetConfig+0x2d4>)
 800549e:	fba3 2302 	umull	r2, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	011c      	lsls	r4, r3, #4
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	64b9      	str	r1, [r7, #72]	; 0x48
 80054c0:	415b      	adcs	r3, r3
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054c8:	4641      	mov	r1, r8
 80054ca:	eb12 0a01 	adds.w	sl, r2, r1
 80054ce:	4649      	mov	r1, r9
 80054d0:	eb43 0b01 	adc.w	fp, r3, r1
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e8:	4692      	mov	sl, r2
 80054ea:	469b      	mov	fp, r3
 80054ec:	4643      	mov	r3, r8
 80054ee:	eb1a 0303 	adds.w	r3, sl, r3
 80054f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054f6:	464b      	mov	r3, r9
 80054f8:	eb4b 0303 	adc.w	r3, fp, r3
 80054fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800550c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005514:	460b      	mov	r3, r1
 8005516:	18db      	adds	r3, r3, r3
 8005518:	643b      	str	r3, [r7, #64]	; 0x40
 800551a:	4613      	mov	r3, r2
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
 8005522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800552a:	f7fb f85d 	bl	80005e8 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4611      	mov	r1, r2
 8005534:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <UART_SetConfig+0x2d4>)
 8005536:	fba3 2301 	umull	r2, r3, r3, r1
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	2264      	movs	r2, #100	; 0x64
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	1acb      	subs	r3, r1, r3
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800554a:	4b36      	ldr	r3, [pc, #216]	; (8005624 <UART_SetConfig+0x2d4>)
 800554c:	fba3 2302 	umull	r2, r3, r3, r2
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005558:	441c      	add	r4, r3
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005564:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	63b9      	str	r1, [r7, #56]	; 0x38
 8005574:	415b      	adcs	r3, r3
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800557c:	4641      	mov	r1, r8
 800557e:	1851      	adds	r1, r2, r1
 8005580:	6339      	str	r1, [r7, #48]	; 0x30
 8005582:	4649      	mov	r1, r9
 8005584:	414b      	adcs	r3, r1
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005594:	4659      	mov	r1, fp
 8005596:	00cb      	lsls	r3, r1, #3
 8005598:	4651      	mov	r1, sl
 800559a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559e:	4651      	mov	r1, sl
 80055a0:	00ca      	lsls	r2, r1, #3
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	4642      	mov	r2, r8
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055b0:	464b      	mov	r3, r9
 80055b2:	460a      	mov	r2, r1
 80055b4:	eb42 0303 	adc.w	r3, r2, r3
 80055b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055d0:	460b      	mov	r3, r1
 80055d2:	18db      	adds	r3, r3, r3
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d6:	4613      	mov	r3, r2
 80055d8:	eb42 0303 	adc.w	r3, r2, r3
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055e6:	f7fa ffff 	bl	80005e8 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <UART_SetConfig+0x2d4>)
 80055f0:	fba3 1302 	umull	r1, r3, r3, r2
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	2164      	movs	r1, #100	; 0x64
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3332      	adds	r3, #50	; 0x32
 8005602:	4a08      	ldr	r2, [pc, #32]	; (8005624 <UART_SetConfig+0x2d4>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	f003 0207 	and.w	r2, r3, #7
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4422      	add	r2, r4
 8005616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005618:	e105      	b.n	8005826 <UART_SetConfig+0x4d6>
 800561a:	bf00      	nop
 800561c:	40011000 	.word	0x40011000
 8005620:	40011400 	.word	0x40011400
 8005624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800563a:	4642      	mov	r2, r8
 800563c:	464b      	mov	r3, r9
 800563e:	1891      	adds	r1, r2, r2
 8005640:	6239      	str	r1, [r7, #32]
 8005642:	415b      	adcs	r3, r3
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800564a:	4641      	mov	r1, r8
 800564c:	1854      	adds	r4, r2, r1
 800564e:	4649      	mov	r1, r9
 8005650:	eb43 0501 	adc.w	r5, r3, r1
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	00eb      	lsls	r3, r5, #3
 800565e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005662:	00e2      	lsls	r2, r4, #3
 8005664:	4614      	mov	r4, r2
 8005666:	461d      	mov	r5, r3
 8005668:	4643      	mov	r3, r8
 800566a:	18e3      	adds	r3, r4, r3
 800566c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005670:	464b      	mov	r3, r9
 8005672:	eb45 0303 	adc.w	r3, r5, r3
 8005676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005696:	4629      	mov	r1, r5
 8005698:	008b      	lsls	r3, r1, #2
 800569a:	4621      	mov	r1, r4
 800569c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a0:	4621      	mov	r1, r4
 80056a2:	008a      	lsls	r2, r1, #2
 80056a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056a8:	f7fa ff9e 	bl	80005e8 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4b60      	ldr	r3, [pc, #384]	; (8005834 <UART_SetConfig+0x4e4>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	011c      	lsls	r4, r3, #4
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	61b9      	str	r1, [r7, #24]
 80056d4:	415b      	adcs	r3, r3
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056dc:	4641      	mov	r1, r8
 80056de:	1851      	adds	r1, r2, r1
 80056e0:	6139      	str	r1, [r7, #16]
 80056e2:	4649      	mov	r1, r9
 80056e4:	414b      	adcs	r3, r1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f4:	4659      	mov	r1, fp
 80056f6:	00cb      	lsls	r3, r1, #3
 80056f8:	4651      	mov	r1, sl
 80056fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fe:	4651      	mov	r1, sl
 8005700:	00ca      	lsls	r2, r1, #3
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	4603      	mov	r3, r0
 8005708:	4642      	mov	r2, r8
 800570a:	189b      	adds	r3, r3, r2
 800570c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005710:	464b      	mov	r3, r9
 8005712:	460a      	mov	r2, r1
 8005714:	eb42 0303 	adc.w	r3, r2, r3
 8005718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	67bb      	str	r3, [r7, #120]	; 0x78
 8005726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005734:	4649      	mov	r1, r9
 8005736:	008b      	lsls	r3, r1, #2
 8005738:	4641      	mov	r1, r8
 800573a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573e:	4641      	mov	r1, r8
 8005740:	008a      	lsls	r2, r1, #2
 8005742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005746:	f7fa ff4f 	bl	80005e8 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b39      	ldr	r3, [pc, #228]	; (8005834 <UART_SetConfig+0x4e4>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	3332      	adds	r3, #50	; 0x32
 8005762:	4a34      	ldr	r2, [pc, #208]	; (8005834 <UART_SetConfig+0x4e4>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576e:	441c      	add	r4, r3
 8005770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005774:	2200      	movs	r2, #0
 8005776:	673b      	str	r3, [r7, #112]	; 0x70
 8005778:	677a      	str	r2, [r7, #116]	; 0x74
 800577a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800577e:	4642      	mov	r2, r8
 8005780:	464b      	mov	r3, r9
 8005782:	1891      	adds	r1, r2, r2
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	415b      	adcs	r3, r3
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578e:	4641      	mov	r1, r8
 8005790:	1851      	adds	r1, r2, r1
 8005792:	6039      	str	r1, [r7, #0]
 8005794:	4649      	mov	r1, r9
 8005796:	414b      	adcs	r3, r1
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a6:	4659      	mov	r1, fp
 80057a8:	00cb      	lsls	r3, r1, #3
 80057aa:	4651      	mov	r1, sl
 80057ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b0:	4651      	mov	r1, sl
 80057b2:	00ca      	lsls	r2, r1, #3
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	4642      	mov	r2, r8
 80057bc:	189b      	adds	r3, r3, r2
 80057be:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c0:	464b      	mov	r3, r9
 80057c2:	460a      	mov	r2, r1
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	663b      	str	r3, [r7, #96]	; 0x60
 80057d4:	667a      	str	r2, [r7, #100]	; 0x64
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057e2:	4649      	mov	r1, r9
 80057e4:	008b      	lsls	r3, r1, #2
 80057e6:	4641      	mov	r1, r8
 80057e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ec:	4641      	mov	r1, r8
 80057ee:	008a      	lsls	r2, r1, #2
 80057f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057f4:	f7fa fef8 	bl	80005e8 <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <UART_SetConfig+0x4e4>)
 80057fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2164      	movs	r1, #100	; 0x64
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	3332      	adds	r3, #50	; 0x32
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <UART_SetConfig+0x4e4>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4422      	add	r2, r4
 8005824:	609a      	str	r2, [r3, #8]
}
 8005826:	bf00      	nop
 8005828:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800582c:	46bd      	mov	sp, r7
 800582e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005832:	bf00      	nop
 8005834:	51eb851f 	.word	0x51eb851f

08005838 <__errno>:
 8005838:	4b01      	ldr	r3, [pc, #4]	; (8005840 <__errno+0x8>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000010 	.word	0x20000010

08005844 <__libc_init_array>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4d0d      	ldr	r5, [pc, #52]	; (800587c <__libc_init_array+0x38>)
 8005848:	4c0d      	ldr	r4, [pc, #52]	; (8005880 <__libc_init_array+0x3c>)
 800584a:	1b64      	subs	r4, r4, r5
 800584c:	10a4      	asrs	r4, r4, #2
 800584e:	2600      	movs	r6, #0
 8005850:	42a6      	cmp	r6, r4
 8005852:	d109      	bne.n	8005868 <__libc_init_array+0x24>
 8005854:	4d0b      	ldr	r5, [pc, #44]	; (8005884 <__libc_init_array+0x40>)
 8005856:	4c0c      	ldr	r4, [pc, #48]	; (8005888 <__libc_init_array+0x44>)
 8005858:	f000 fc8e 	bl	8006178 <_init>
 800585c:	1b64      	subs	r4, r4, r5
 800585e:	10a4      	asrs	r4, r4, #2
 8005860:	2600      	movs	r6, #0
 8005862:	42a6      	cmp	r6, r4
 8005864:	d105      	bne.n	8005872 <__libc_init_array+0x2e>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	f855 3b04 	ldr.w	r3, [r5], #4
 800586c:	4798      	blx	r3
 800586e:	3601      	adds	r6, #1
 8005870:	e7ee      	b.n	8005850 <__libc_init_array+0xc>
 8005872:	f855 3b04 	ldr.w	r3, [r5], #4
 8005876:	4798      	blx	r3
 8005878:	3601      	adds	r6, #1
 800587a:	e7f2      	b.n	8005862 <__libc_init_array+0x1e>
 800587c:	08006cf0 	.word	0x08006cf0
 8005880:	08006cf0 	.word	0x08006cf0
 8005884:	08006cf0 	.word	0x08006cf0
 8005888:	08006cf4 	.word	0x08006cf4

0800588c <memset>:
 800588c:	4402      	add	r2, r0
 800588e:	4603      	mov	r3, r0
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <memset+0xa>
 8005894:	4770      	bx	lr
 8005896:	f803 1b01 	strb.w	r1, [r3], #1
 800589a:	e7f9      	b.n	8005890 <memset+0x4>

0800589c <siprintf>:
 800589c:	b40e      	push	{r1, r2, r3}
 800589e:	b500      	push	{lr}
 80058a0:	b09c      	sub	sp, #112	; 0x70
 80058a2:	ab1d      	add	r3, sp, #116	; 0x74
 80058a4:	9002      	str	r0, [sp, #8]
 80058a6:	9006      	str	r0, [sp, #24]
 80058a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058ac:	4809      	ldr	r0, [pc, #36]	; (80058d4 <siprintf+0x38>)
 80058ae:	9107      	str	r1, [sp, #28]
 80058b0:	9104      	str	r1, [sp, #16]
 80058b2:	4909      	ldr	r1, [pc, #36]	; (80058d8 <siprintf+0x3c>)
 80058b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	a902      	add	r1, sp, #8
 80058c0:	f000 f868 	bl	8005994 <_svfiprintf_r>
 80058c4:	9b02      	ldr	r3, [sp, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	b01c      	add	sp, #112	; 0x70
 80058cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d0:	b003      	add	sp, #12
 80058d2:	4770      	bx	lr
 80058d4:	20000010 	.word	0x20000010
 80058d8:	ffff0208 	.word	0xffff0208

080058dc <__ssputs_r>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	688e      	ldr	r6, [r1, #8]
 80058e2:	429e      	cmp	r6, r3
 80058e4:	4682      	mov	sl, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	461f      	mov	r7, r3
 80058ec:	d838      	bhi.n	8005960 <__ssputs_r+0x84>
 80058ee:	898a      	ldrh	r2, [r1, #12]
 80058f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f4:	d032      	beq.n	800595c <__ssputs_r+0x80>
 80058f6:	6825      	ldr	r5, [r4, #0]
 80058f8:	6909      	ldr	r1, [r1, #16]
 80058fa:	eba5 0901 	sub.w	r9, r5, r1
 80058fe:	6965      	ldr	r5, [r4, #20]
 8005900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005908:	3301      	adds	r3, #1
 800590a:	444b      	add	r3, r9
 800590c:	106d      	asrs	r5, r5, #1
 800590e:	429d      	cmp	r5, r3
 8005910:	bf38      	it	cc
 8005912:	461d      	movcc	r5, r3
 8005914:	0553      	lsls	r3, r2, #21
 8005916:	d531      	bpl.n	800597c <__ssputs_r+0xa0>
 8005918:	4629      	mov	r1, r5
 800591a:	f000 fb63 	bl	8005fe4 <_malloc_r>
 800591e:	4606      	mov	r6, r0
 8005920:	b950      	cbnz	r0, 8005938 <__ssputs_r+0x5c>
 8005922:	230c      	movs	r3, #12
 8005924:	f8ca 3000 	str.w	r3, [sl]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	6921      	ldr	r1, [r4, #16]
 800593a:	464a      	mov	r2, r9
 800593c:	f000 fabe 	bl	8005ebc <memcpy>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	6126      	str	r6, [r4, #16]
 800594e:	6165      	str	r5, [r4, #20]
 8005950:	444e      	add	r6, r9
 8005952:	eba5 0509 	sub.w	r5, r5, r9
 8005956:	6026      	str	r6, [r4, #0]
 8005958:	60a5      	str	r5, [r4, #8]
 800595a:	463e      	mov	r6, r7
 800595c:	42be      	cmp	r6, r7
 800595e:	d900      	bls.n	8005962 <__ssputs_r+0x86>
 8005960:	463e      	mov	r6, r7
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	4632      	mov	r2, r6
 8005966:	4641      	mov	r1, r8
 8005968:	f000 fab6 	bl	8005ed8 <memmove>
 800596c:	68a3      	ldr	r3, [r4, #8]
 800596e:	1b9b      	subs	r3, r3, r6
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	4433      	add	r3, r6
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	2000      	movs	r0, #0
 800597a:	e7db      	b.n	8005934 <__ssputs_r+0x58>
 800597c:	462a      	mov	r2, r5
 800597e:	f000 fba5 	bl	80060cc <_realloc_r>
 8005982:	4606      	mov	r6, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d1e1      	bne.n	800594c <__ssputs_r+0x70>
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	4650      	mov	r0, sl
 800598c:	f000 fabe 	bl	8005f0c <_free_r>
 8005990:	e7c7      	b.n	8005922 <__ssputs_r+0x46>
	...

08005994 <_svfiprintf_r>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	4698      	mov	r8, r3
 800599a:	898b      	ldrh	r3, [r1, #12]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	b09d      	sub	sp, #116	; 0x74
 80059a0:	4607      	mov	r7, r0
 80059a2:	460d      	mov	r5, r1
 80059a4:	4614      	mov	r4, r2
 80059a6:	d50e      	bpl.n	80059c6 <_svfiprintf_r+0x32>
 80059a8:	690b      	ldr	r3, [r1, #16]
 80059aa:	b963      	cbnz	r3, 80059c6 <_svfiprintf_r+0x32>
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	f000 fb19 	bl	8005fe4 <_malloc_r>
 80059b2:	6028      	str	r0, [r5, #0]
 80059b4:	6128      	str	r0, [r5, #16]
 80059b6:	b920      	cbnz	r0, 80059c2 <_svfiprintf_r+0x2e>
 80059b8:	230c      	movs	r3, #12
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	e0d1      	b.n	8005b66 <_svfiprintf_r+0x1d2>
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	616b      	str	r3, [r5, #20]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ca:	2320      	movs	r3, #32
 80059cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d4:	2330      	movs	r3, #48	; 0x30
 80059d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b80 <_svfiprintf_r+0x1ec>
 80059da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059de:	f04f 0901 	mov.w	r9, #1
 80059e2:	4623      	mov	r3, r4
 80059e4:	469a      	mov	sl, r3
 80059e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ea:	b10a      	cbz	r2, 80059f0 <_svfiprintf_r+0x5c>
 80059ec:	2a25      	cmp	r2, #37	; 0x25
 80059ee:	d1f9      	bne.n	80059e4 <_svfiprintf_r+0x50>
 80059f0:	ebba 0b04 	subs.w	fp, sl, r4
 80059f4:	d00b      	beq.n	8005a0e <_svfiprintf_r+0x7a>
 80059f6:	465b      	mov	r3, fp
 80059f8:	4622      	mov	r2, r4
 80059fa:	4629      	mov	r1, r5
 80059fc:	4638      	mov	r0, r7
 80059fe:	f7ff ff6d 	bl	80058dc <__ssputs_r>
 8005a02:	3001      	adds	r0, #1
 8005a04:	f000 80aa 	beq.w	8005b5c <_svfiprintf_r+0x1c8>
 8005a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0a:	445a      	add	r2, fp
 8005a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80a2 	beq.w	8005b5c <_svfiprintf_r+0x1c8>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a22:	f10a 0a01 	add.w	sl, sl, #1
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	9307      	str	r3, [sp, #28]
 8005a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a30:	4654      	mov	r4, sl
 8005a32:	2205      	movs	r2, #5
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	4851      	ldr	r0, [pc, #324]	; (8005b80 <_svfiprintf_r+0x1ec>)
 8005a3a:	f7fa fbc9 	bl	80001d0 <memchr>
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	b9d8      	cbnz	r0, 8005a7a <_svfiprintf_r+0xe6>
 8005a42:	06d0      	lsls	r0, r2, #27
 8005a44:	bf44      	itt	mi
 8005a46:	2320      	movmi	r3, #32
 8005a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4c:	0711      	lsls	r1, r2, #28
 8005a4e:	bf44      	itt	mi
 8005a50:	232b      	movmi	r3, #43	; 0x2b
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5c:	d015      	beq.n	8005a8a <_svfiprintf_r+0xf6>
 8005a5e:	9a07      	ldr	r2, [sp, #28]
 8005a60:	4654      	mov	r4, sl
 8005a62:	2000      	movs	r0, #0
 8005a64:	f04f 0c0a 	mov.w	ip, #10
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6e:	3b30      	subs	r3, #48	; 0x30
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d94e      	bls.n	8005b12 <_svfiprintf_r+0x17e>
 8005a74:	b1b0      	cbz	r0, 8005aa4 <_svfiprintf_r+0x110>
 8005a76:	9207      	str	r2, [sp, #28]
 8005a78:	e014      	b.n	8005aa4 <_svfiprintf_r+0x110>
 8005a7a:	eba0 0308 	sub.w	r3, r0, r8
 8005a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	46a2      	mov	sl, r4
 8005a88:	e7d2      	b.n	8005a30 <_svfiprintf_r+0x9c>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	1d19      	adds	r1, r3, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9103      	str	r1, [sp, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfbb      	ittet	lt
 8005a96:	425b      	neglt	r3, r3
 8005a98:	f042 0202 	orrlt.w	r2, r2, #2
 8005a9c:	9307      	strge	r3, [sp, #28]
 8005a9e:	9307      	strlt	r3, [sp, #28]
 8005aa0:	bfb8      	it	lt
 8005aa2:	9204      	strlt	r2, [sp, #16]
 8005aa4:	7823      	ldrb	r3, [r4, #0]
 8005aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa8:	d10c      	bne.n	8005ac4 <_svfiprintf_r+0x130>
 8005aaa:	7863      	ldrb	r3, [r4, #1]
 8005aac:	2b2a      	cmp	r3, #42	; 0x2a
 8005aae:	d135      	bne.n	8005b1c <_svfiprintf_r+0x188>
 8005ab0:	9b03      	ldr	r3, [sp, #12]
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	9203      	str	r2, [sp, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfb8      	it	lt
 8005abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ac0:	3402      	adds	r4, #2
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b90 <_svfiprintf_r+0x1fc>
 8005ac8:	7821      	ldrb	r1, [r4, #0]
 8005aca:	2203      	movs	r2, #3
 8005acc:	4650      	mov	r0, sl
 8005ace:	f7fa fb7f 	bl	80001d0 <memchr>
 8005ad2:	b140      	cbz	r0, 8005ae6 <_svfiprintf_r+0x152>
 8005ad4:	2340      	movs	r3, #64	; 0x40
 8005ad6:	eba0 000a 	sub.w	r0, r0, sl
 8005ada:	fa03 f000 	lsl.w	r0, r3, r0
 8005ade:	9b04      	ldr	r3, [sp, #16]
 8005ae0:	4303      	orrs	r3, r0
 8005ae2:	3401      	adds	r4, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aea:	4826      	ldr	r0, [pc, #152]	; (8005b84 <_svfiprintf_r+0x1f0>)
 8005aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af0:	2206      	movs	r2, #6
 8005af2:	f7fa fb6d 	bl	80001d0 <memchr>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d038      	beq.n	8005b6c <_svfiprintf_r+0x1d8>
 8005afa:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <_svfiprintf_r+0x1f4>)
 8005afc:	bb1b      	cbnz	r3, 8005b46 <_svfiprintf_r+0x1b2>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	3307      	adds	r3, #7
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	3308      	adds	r3, #8
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0c:	4433      	add	r3, r6
 8005b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b10:	e767      	b.n	80059e2 <_svfiprintf_r+0x4e>
 8005b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b16:	460c      	mov	r4, r1
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e7a5      	b.n	8005a68 <_svfiprintf_r+0xd4>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f04f 0c0a 	mov.w	ip, #10
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2e:	3a30      	subs	r2, #48	; 0x30
 8005b30:	2a09      	cmp	r2, #9
 8005b32:	d903      	bls.n	8005b3c <_svfiprintf_r+0x1a8>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0c5      	beq.n	8005ac4 <_svfiprintf_r+0x130>
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	e7c3      	b.n	8005ac4 <_svfiprintf_r+0x130>
 8005b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b40:	4604      	mov	r4, r0
 8005b42:	2301      	movs	r3, #1
 8005b44:	e7f0      	b.n	8005b28 <_svfiprintf_r+0x194>
 8005b46:	ab03      	add	r3, sp, #12
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <_svfiprintf_r+0x1f8>)
 8005b4e:	a904      	add	r1, sp, #16
 8005b50:	4638      	mov	r0, r7
 8005b52:	f3af 8000 	nop.w
 8005b56:	1c42      	adds	r2, r0, #1
 8005b58:	4606      	mov	r6, r0
 8005b5a:	d1d6      	bne.n	8005b0a <_svfiprintf_r+0x176>
 8005b5c:	89ab      	ldrh	r3, [r5, #12]
 8005b5e:	065b      	lsls	r3, r3, #25
 8005b60:	f53f af2c 	bmi.w	80059bc <_svfiprintf_r+0x28>
 8005b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b66:	b01d      	add	sp, #116	; 0x74
 8005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	ab03      	add	r3, sp, #12
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	462a      	mov	r2, r5
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <_svfiprintf_r+0x1f8>)
 8005b74:	a904      	add	r1, sp, #16
 8005b76:	4638      	mov	r0, r7
 8005b78:	f000 f87a 	bl	8005c70 <_printf_i>
 8005b7c:	e7eb      	b.n	8005b56 <_svfiprintf_r+0x1c2>
 8005b7e:	bf00      	nop
 8005b80:	08006cb4 	.word	0x08006cb4
 8005b84:	08006cbe 	.word	0x08006cbe
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	080058dd 	.word	0x080058dd
 8005b90:	08006cba 	.word	0x08006cba

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	68e5      	ldr	r5, [r4, #12]
 8005bfe:	6832      	ldr	r2, [r6, #0]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	; 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	7e0f      	ldrb	r7, [r1, #24]
 8005c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c78:	2f78      	cmp	r7, #120	; 0x78
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	469a      	mov	sl, r3
 8005c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	; 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d8 	beq.w	8005e42 <_printf_i+0x1d2>
 8005c92:	2f58      	cmp	r7, #88	; 0x58
 8005c94:	f000 80a3 	beq.w	8005dde <_printf_i+0x16e>
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a101      	add	r1, pc, #4	; (adr r1, 8005cb0 <_printf_i+0x40>)
 8005cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e29 	.word	0x08005e29
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005e0b 	.word	0x08005e0b
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e4b 	.word	0x08005e4b
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005e13 	.word	0x08005e13
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	602a      	str	r2, [r5, #0]
 8005d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0a3      	b.n	8005e64 <_printf_i+0x1f4>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	6829      	ldr	r1, [r5, #0]
 8005d20:	0606      	lsls	r6, r0, #24
 8005d22:	f101 0304 	add.w	r3, r1, #4
 8005d26:	d50a      	bpl.n	8005d3e <_printf_i+0xce>
 8005d28:	680e      	ldr	r6, [r1, #0]
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	2e00      	cmp	r6, #0
 8005d2e:	da03      	bge.n	8005d38 <_printf_i+0xc8>
 8005d30:	232d      	movs	r3, #45	; 0x2d
 8005d32:	4276      	negs	r6, r6
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	485e      	ldr	r0, [pc, #376]	; (8005eb4 <_printf_i+0x244>)
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	e019      	b.n	8005d72 <_printf_i+0x102>
 8005d3e:	680e      	ldr	r6, [r1, #0]
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d46:	bf18      	it	ne
 8005d48:	b236      	sxthne	r6, r6
 8005d4a:	e7ef      	b.n	8005d2c <_printf_i+0xbc>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	6820      	ldr	r0, [r4, #0]
 8005d50:	1d19      	adds	r1, r3, #4
 8005d52:	6029      	str	r1, [r5, #0]
 8005d54:	0601      	lsls	r1, r0, #24
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0xec>
 8005d58:	681e      	ldr	r6, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0xf2>
 8005d5c:	0646      	lsls	r6, r0, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0xe8>
 8005d60:	881e      	ldrh	r6, [r3, #0]
 8005d62:	4854      	ldr	r0, [pc, #336]	; (8005eb4 <_printf_i+0x244>)
 8005d64:	2f6f      	cmp	r7, #111	; 0x6f
 8005d66:	bf0c      	ite	eq
 8005d68:	2308      	moveq	r3, #8
 8005d6a:	230a      	movne	r3, #10
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d72:	6865      	ldr	r5, [r4, #4]
 8005d74:	60a5      	str	r5, [r4, #8]
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	bfa2      	ittt	ge
 8005d7a:	6821      	ldrge	r1, [r4, #0]
 8005d7c:	f021 0104 	bicge.w	r1, r1, #4
 8005d80:	6021      	strge	r1, [r4, #0]
 8005d82:	b90e      	cbnz	r6, 8005d88 <_printf_i+0x118>
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	d04d      	beq.n	8005e24 <_printf_i+0x1b4>
 8005d88:	4615      	mov	r5, r2
 8005d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d92:	5dc7      	ldrb	r7, [r0, r7]
 8005d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d98:	4637      	mov	r7, r6
 8005d9a:	42bb      	cmp	r3, r7
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	d9f4      	bls.n	8005d8a <_printf_i+0x11a>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d10b      	bne.n	8005dbc <_printf_i+0x14c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07de      	lsls	r6, r3, #31
 8005da8:	d508      	bpl.n	8005dbc <_printf_i+0x14c>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4299      	cmp	r1, r3
 8005db0:	bfde      	ittt	le
 8005db2:	2330      	movle	r3, #48	; 0x30
 8005db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dbc:	1b52      	subs	r2, r2, r5
 8005dbe:	6122      	str	r2, [r4, #16]
 8005dc0:	f8cd a000 	str.w	sl, [sp]
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	aa03      	add	r2, sp, #12
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f7ff fee2 	bl	8005b94 <_printf_common>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d14c      	bne.n	8005e6e <_printf_i+0x1fe>
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	b004      	add	sp, #16
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dde:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <_printf_i+0x244>)
 8005de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005de4:	6829      	ldr	r1, [r5, #0]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dec:	6029      	str	r1, [r5, #0]
 8005dee:	061d      	lsls	r5, r3, #24
 8005df0:	d514      	bpl.n	8005e1c <_printf_i+0x1ac>
 8005df2:	07df      	lsls	r7, r3, #31
 8005df4:	bf44      	itt	mi
 8005df6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfa:	6023      	strmi	r3, [r4, #0]
 8005dfc:	b91e      	cbnz	r6, 8005e06 <_printf_i+0x196>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7b0      	b.n	8005d6c <_printf_i+0xfc>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2378      	movs	r3, #120	; 0x78
 8005e14:	4828      	ldr	r0, [pc, #160]	; (8005eb8 <_printf_i+0x248>)
 8005e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1a:	e7e3      	b.n	8005de4 <_printf_i+0x174>
 8005e1c:	0659      	lsls	r1, r3, #25
 8005e1e:	bf48      	it	mi
 8005e20:	b2b6      	uxthmi	r6, r6
 8005e22:	e7e6      	b.n	8005df2 <_printf_i+0x182>
 8005e24:	4615      	mov	r5, r2
 8005e26:	e7bb      	b.n	8005da0 <_printf_i+0x130>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	6826      	ldr	r6, [r4, #0]
 8005e2c:	6961      	ldr	r1, [r4, #20]
 8005e2e:	1d18      	adds	r0, r3, #4
 8005e30:	6028      	str	r0, [r5, #0]
 8005e32:	0635      	lsls	r5, r6, #24
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0x1cc>
 8005e38:	6019      	str	r1, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0x1d2>
 8005e3c:	0670      	lsls	r0, r6, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0x1c8>
 8005e40:	8019      	strh	r1, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	4615      	mov	r5, r2
 8005e48:	e7ba      	b.n	8005dc0 <_printf_i+0x150>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	602a      	str	r2, [r5, #0]
 8005e50:	681d      	ldr	r5, [r3, #0]
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	2100      	movs	r1, #0
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fa f9ba 	bl	80001d0 <memchr>
 8005e5c:	b108      	cbz	r0, 8005e62 <_printf_i+0x1f2>
 8005e5e:	1b40      	subs	r0, r0, r5
 8005e60:	6060      	str	r0, [r4, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	2300      	movs	r3, #0
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6c:	e7a8      	b.n	8005dc0 <_printf_i+0x150>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d0ab      	beq.n	8005dd4 <_printf_i+0x164>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	079b      	lsls	r3, r3, #30
 8005e80:	d413      	bmi.n	8005eaa <_printf_i+0x23a>
 8005e82:	68e0      	ldr	r0, [r4, #12]
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	4298      	cmp	r0, r3
 8005e88:	bfb8      	it	lt
 8005e8a:	4618      	movlt	r0, r3
 8005e8c:	e7a4      	b.n	8005dd8 <_printf_i+0x168>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4632      	mov	r2, r6
 8005e92:	4649      	mov	r1, r9
 8005e94:	4640      	mov	r0, r8
 8005e96:	47d0      	blx	sl
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d09b      	beq.n	8005dd4 <_printf_i+0x164>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	9903      	ldr	r1, [sp, #12]
 8005ea2:	1a5b      	subs	r3, r3, r1
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dcf2      	bgt.n	8005e8e <_printf_i+0x21e>
 8005ea8:	e7eb      	b.n	8005e82 <_printf_i+0x212>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	f104 0619 	add.w	r6, r4, #25
 8005eb0:	e7f5      	b.n	8005e9e <_printf_i+0x22e>
 8005eb2:	bf00      	nop
 8005eb4:	08006cc5 	.word	0x08006cc5
 8005eb8:	08006cd6 	.word	0x08006cd6

08005ebc <memcpy>:
 8005ebc:	440a      	add	r2, r1
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec4:	d100      	bne.n	8005ec8 <memcpy+0xc>
 8005ec6:	4770      	bx	lr
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	d1f9      	bne.n	8005eca <memcpy+0xe>
 8005ed6:	bd10      	pop	{r4, pc}

08005ed8 <memmove>:
 8005ed8:	4288      	cmp	r0, r1
 8005eda:	b510      	push	{r4, lr}
 8005edc:	eb01 0402 	add.w	r4, r1, r2
 8005ee0:	d902      	bls.n	8005ee8 <memmove+0x10>
 8005ee2:	4284      	cmp	r4, r0
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	d807      	bhi.n	8005ef8 <memmove+0x20>
 8005ee8:	1e43      	subs	r3, r0, #1
 8005eea:	42a1      	cmp	r1, r4
 8005eec:	d008      	beq.n	8005f00 <memmove+0x28>
 8005eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ef6:	e7f8      	b.n	8005eea <memmove+0x12>
 8005ef8:	4402      	add	r2, r0
 8005efa:	4601      	mov	r1, r0
 8005efc:	428a      	cmp	r2, r1
 8005efe:	d100      	bne.n	8005f02 <memmove+0x2a>
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f0a:	e7f7      	b.n	8005efc <memmove+0x24>

08005f0c <_free_r>:
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d044      	beq.n	8005f9c <_free_r+0x90>
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f1e:	bfb8      	it	lt
 8005f20:	18e4      	addlt	r4, r4, r3
 8005f22:	f000 f913 	bl	800614c <__malloc_lock>
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x30>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	b003      	add	sp, #12
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	f000 b90e 	b.w	8006158 <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x46>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1949      	addeq	r1, r1, r5
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x22>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x50>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x46>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1855      	adds	r5, r2, r1
 8005f60:	42a5      	cmp	r5, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x70>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	4421      	add	r1, r4
 8005f68:	1854      	adds	r4, r2, r1
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x26>
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	4421      	add	r1, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x26>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x78>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x26>
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf04      	itt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	bf04      	itt	eq
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6054      	str	r4, [r2, #4]
 8005f9a:	e7ca      	b.n	8005f32 <_free_r+0x26>
 8005f9c:	b003      	add	sp, #12
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	20000660 	.word	0x20000660

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0e      	ldr	r6, [pc, #56]	; (8005fe0 <sbrk_aligned+0x3c>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 f8bc 	bl	800612c <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f8b7 	bl	800612c <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <sbrk_aligned+0x34>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d007      	beq.n	8005fdc <sbrk_aligned+0x38>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 f8ac 	bl	800612c <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d101      	bne.n	8005fdc <sbrk_aligned+0x38>
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	20000664 	.word	0x20000664

08005fe4 <_malloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	1ccd      	adds	r5, r1, #3
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db01      	blt.n	8006000 <_malloc_r+0x1c>
 8005ffc:	42a9      	cmp	r1, r5
 8005ffe:	d905      	bls.n	800600c <_malloc_r+0x28>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	2600      	movs	r6, #0
 8006006:	4630      	mov	r0, r6
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4e2e      	ldr	r6, [pc, #184]	; (80060c8 <_malloc_r+0xe4>)
 800600e:	f000 f89d 	bl	800614c <__malloc_lock>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	461c      	mov	r4, r3
 8006016:	bb34      	cbnz	r4, 8006066 <_malloc_r+0x82>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ffc2 	bl	8005fa4 <sbrk_aligned>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	4604      	mov	r4, r0
 8006024:	d14d      	bne.n	80060c2 <_malloc_r+0xde>
 8006026:	6834      	ldr	r4, [r6, #0]
 8006028:	4626      	mov	r6, r4
 800602a:	2e00      	cmp	r6, #0
 800602c:	d140      	bne.n	80060b0 <_malloc_r+0xcc>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	eb04 0803 	add.w	r8, r4, r3
 8006038:	f000 f878 	bl	800612c <_sbrk_r>
 800603c:	4580      	cmp	r8, r0
 800603e:	d13a      	bne.n	80060b6 <_malloc_r+0xd2>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	3503      	adds	r5, #3
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <sbrk_aligned>
 800605a:	3001      	adds	r0, #1
 800605c:	d02b      	beq.n	80060b6 <_malloc_r+0xd2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	442b      	add	r3, r5
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e00e      	b.n	8006084 <_malloc_r+0xa0>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	d41e      	bmi.n	80060aa <_malloc_r+0xc6>
 800606c:	2a0b      	cmp	r2, #11
 800606e:	d916      	bls.n	800609e <_malloc_r+0xba>
 8006070:	1961      	adds	r1, r4, r5
 8006072:	42a3      	cmp	r3, r4
 8006074:	6025      	str	r5, [r4, #0]
 8006076:	bf18      	it	ne
 8006078:	6059      	strne	r1, [r3, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	bf08      	it	eq
 800607e:	6031      	streq	r1, [r6, #0]
 8006080:	5162      	str	r2, [r4, r5]
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	4638      	mov	r0, r7
 8006086:	f104 060b 	add.w	r6, r4, #11
 800608a:	f000 f865 	bl	8006158 <__malloc_unlock>
 800608e:	f026 0607 	bic.w	r6, r6, #7
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	1af2      	subs	r2, r6, r3
 8006096:	d0b6      	beq.n	8006006 <_malloc_r+0x22>
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	50a3      	str	r3, [r4, r2]
 800609c:	e7b3      	b.n	8006006 <_malloc_r+0x22>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	bf0c      	ite	eq
 80060a4:	6032      	streq	r2, [r6, #0]
 80060a6:	605a      	strne	r2, [r3, #4]
 80060a8:	e7ec      	b.n	8006084 <_malloc_r+0xa0>
 80060aa:	4623      	mov	r3, r4
 80060ac:	6864      	ldr	r4, [r4, #4]
 80060ae:	e7b2      	b.n	8006016 <_malloc_r+0x32>
 80060b0:	4634      	mov	r4, r6
 80060b2:	6876      	ldr	r6, [r6, #4]
 80060b4:	e7b9      	b.n	800602a <_malloc_r+0x46>
 80060b6:	230c      	movs	r3, #12
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 f84c 	bl	8006158 <__malloc_unlock>
 80060c0:	e7a1      	b.n	8006006 <_malloc_r+0x22>
 80060c2:	6025      	str	r5, [r4, #0]
 80060c4:	e7de      	b.n	8006084 <_malloc_r+0xa0>
 80060c6:	bf00      	nop
 80060c8:	20000660 	.word	0x20000660

080060cc <_realloc_r>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	4680      	mov	r8, r0
 80060d2:	4614      	mov	r4, r2
 80060d4:	460e      	mov	r6, r1
 80060d6:	b921      	cbnz	r1, 80060e2 <_realloc_r+0x16>
 80060d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	4611      	mov	r1, r2
 80060de:	f7ff bf81 	b.w	8005fe4 <_malloc_r>
 80060e2:	b92a      	cbnz	r2, 80060f0 <_realloc_r+0x24>
 80060e4:	f7ff ff12 	bl	8005f0c <_free_r>
 80060e8:	4625      	mov	r5, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f0:	f000 f838 	bl	8006164 <_malloc_usable_size_r>
 80060f4:	4284      	cmp	r4, r0
 80060f6:	4607      	mov	r7, r0
 80060f8:	d802      	bhi.n	8006100 <_realloc_r+0x34>
 80060fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060fe:	d812      	bhi.n	8006126 <_realloc_r+0x5a>
 8006100:	4621      	mov	r1, r4
 8006102:	4640      	mov	r0, r8
 8006104:	f7ff ff6e 	bl	8005fe4 <_malloc_r>
 8006108:	4605      	mov	r5, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d0ed      	beq.n	80060ea <_realloc_r+0x1e>
 800610e:	42bc      	cmp	r4, r7
 8006110:	4622      	mov	r2, r4
 8006112:	4631      	mov	r1, r6
 8006114:	bf28      	it	cs
 8006116:	463a      	movcs	r2, r7
 8006118:	f7ff fed0 	bl	8005ebc <memcpy>
 800611c:	4631      	mov	r1, r6
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fef4 	bl	8005f0c <_free_r>
 8006124:	e7e1      	b.n	80060ea <_realloc_r+0x1e>
 8006126:	4635      	mov	r5, r6
 8006128:	e7df      	b.n	80060ea <_realloc_r+0x1e>
	...

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d06      	ldr	r5, [pc, #24]	; (8006148 <_sbrk_r+0x1c>)
 8006130:	2300      	movs	r3, #0
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb ff62 	bl	8002000 <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000668 	.word	0x20000668

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_lock+0x8>)
 800614e:	f000 b811 	b.w	8006174 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	2000066c 	.word	0x2000066c

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_unlock+0x8>)
 800615a:	f000 b80c 	b.w	8006176 <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	2000066c 	.word	0x2000066c

08006164 <_malloc_usable_size_r>:
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbc      	itt	lt
 800616e:	580b      	ldrlt	r3, [r1, r0]
 8006170:	18c0      	addlt	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <_init>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr

08006184 <_fini>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr
